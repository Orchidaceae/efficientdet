
[0;32m[VAIQ_NOTE]: Loading NNDCT kernels...[0m

[0;32m[VAIQ_NOTE]: Quantization calibration process start up...[0m

[0;32m[VAIQ_NOTE]: =>Quant Module is in 'cpu'.[0m

[0;32m[VAIQ_NOTE]: =>Parsing EfficientDet...[0m
Traceback (most recent call last):
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/pdb.py", line 1667, in main
    pdb._runscript(mainpyfile)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/bdb.py", line 434, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/home/ljosefs/Desktop/EffDet/efficientdet/vai-quant.py", line 7, in <module>
    import random """
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/apis.py", line 77, in __init__
    custom_quant_ops = custom_quant_ops)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/base.py", line 122, in __init__
    device=device)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/utils.py", line 175, in prepare_quantizable_module
    graph = parse_module(module, input_args)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/utils.py", line 78, in parse_module
    module, input_args)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/parser.py", line 68, in __call__
    raw_graph, raw_params = graph_handler.build_torch_graph(graph_name, module, input_args)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/trace_helper.py", line 44, in build_torch_graph
    raw_graph, raw_params = self._build_raw_graph(graph_name, fw_graph, params)
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/trace_helper.py", line 159, in _build_raw_graph
    const_value = TorchValue(list(fw_node.outputs())[0])
  File "/home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/torch_graph.py", line 184, in __init__
    self._type = str(value.type())
RuntimeError: Caught an unknown exception!
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/torch_graph.py(184)__init__()
-> self._type = str(value.type())
(Pdb) > /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/trace_helper.py(159)_build_raw_graph()
-> const_value = TorchValue(list(fw_node.outputs())[0])
(Pdb) %539 : int[] = prim::Constant[value=[0, 1, 0, 1]]()

%540 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%541 : Float(1, 3, 513, 513) = aten::constant_pad_nd(%input_0, %539, %540), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%542 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding

%543 : int[] = prim::Constant[value=[2, 2]]()

%544 : int[] = prim::Constant[value=[0, 0]]()

%545 : int[] = prim::Constant[value=[1, 1]]()

%546 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%547 : int[] = prim::Constant[value=[0, 0]]()

%548 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%549 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%550 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%551 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.2 : Float(1, 32, 256, 256) = aten::_convolution(%541, %backbone_net.model._conv_stem.weight, %542, %543, %544, %545, %546, %547, %548, %549, %550, %551), scope: EfficientDet/EfficientNet[backbone_net]/Conv2dStaticSamePadding # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%553 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/BatchNorm2d # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%554 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/BatchNorm2d # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%555 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/BatchNorm2d # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%556 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/BatchNorm2d # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%557 : Float(1, 32, 256, 256) = aten::batch_norm(%input.2, %backbone_net.model._bn0.weight, %backbone_net.model._bn0.bias, %backbone_net.model._bn0.running_mean, %backbone_net.model._bn0.running_var, %553, %554, %555, %556), scope: EfficientDet/EfficientNet[backbone_net]/BatchNorm2d # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%558 : Float(1, 32, 256, 256) = aten::sigmoid(%557), scope: EfficientDet/EfficientNet[backbone_net]/Swish # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.3 : Float(1, 32, 256, 256) = aten::mul(%557, %558), scope: EfficientDet/EfficientNet[backbone_net]/Swish # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%560 : int[] = prim::Constant[value=[1, 1, 1, 1]]()

%561 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%562 : Float(1, 32, 258, 258) = aten::constant_pad_nd(%input.3, %560, %561), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%563 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%564 : int[] = prim::Constant[value=[1, 1]]()

%565 : int[] = prim::Constant[value=[0, 0]]()

%566 : int[] = prim::Constant[value=[1, 1]]()

%567 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%568 : int[] = prim::Constant[value=[0, 0]]()

%569 : int = prim::Constant[value=32](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%570 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%571 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%572 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.4 : Float(1, 32, 256, 256) = aten::_convolution(%562, %backbone_net.model._blocks.0._depthwise_conv.weight, %563, %564, %565, %566, %567, %568, %569, %570, %571, %572), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%574 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%575 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%576 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%577 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%578 : Float(1, 32, 256, 256) = aten::batch_norm(%input.4, %backbone_net.model._blocks.0._bn1.weight, %backbone_net.model._blocks.0._bn1.bias, %backbone_net.model._blocks.0._bn1.running_mean, %backbone_net.model._blocks.0._bn1.running_var, %574, %575, %576, %577), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%579 : Float(1, 32, 256, 256) = aten::sigmoid(%578), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.1 : Float(1, 32, 256, 256) = aten::mul(%578, %579), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%581 : int[] = prim::Constant[value=[1, 1]]()

%582 : Float(1, 32, 1, 1) = aten::adaptive_avg_pool2d(%x.1, %581), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%583 : int[] = prim::Constant[value=[1, 1]]()

%584 : int[] = prim::Constant[value=[0, 0]]()

%585 : int[] = prim::Constant[value=[1, 1]]()

%586 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%587 : int[] = prim::Constant[value=[0, 0]]()

%588 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%589 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%590 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%591 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%592 : Float(1, 8, 1, 1) = aten::_convolution(%582, %backbone_net.model._blocks.0._se_reduce.weight, %backbone_net.model._blocks.0._se_reduce.bias, %583, %584, %585, %586, %587, %588, %589, %590, %591), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%593 : Float(1, 8, 1, 1) = aten::sigmoid(%592), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%594 : Float(1, 8, 1, 1) = aten::mul(%592, %593), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%595 : int[] = prim::Constant[value=[1, 1]]()

%596 : int[] = prim::Constant[value=[0, 0]]()

%597 : int[] = prim::Constant[value=[1, 1]]()

%598 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%599 : int[] = prim::Constant[value=[0, 0]]()

%600 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%601 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%602 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%603 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%604 : Float(1, 32, 1, 1) = aten::_convolution(%594, %backbone_net.model._blocks.0._se_expand.weight, %backbone_net.model._blocks.0._se_expand.bias, %595, %596, %597, %598, %599, %600, %601, %602, %603), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%605 : Float(1, 32, 1, 1) = aten::sigmoid(%604), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%606 : Float(1, 32, 256, 256) = aten::mul(%605, %x.1), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%607 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%608 : int[] = prim::Constant[value=[1, 1]]()

%609 : int[] = prim::Constant[value=[0, 0]]()

%610 : int[] = prim::Constant[value=[1, 1]]()

%611 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%612 : int[] = prim::Constant[value=[0, 0]]()

%613 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%614 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%615 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%616 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.5 : Float(1, 16, 256, 256) = aten::_convolution(%606, %backbone_net.model._blocks.0._project_conv.weight, %607, %608, %609, %610, %611, %612, %613, %614, %615, %616), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%618 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%619 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%620 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%621 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%622 : Float(1, 16, 256, 256) = aten::batch_norm(%input.5, %backbone_net.model._blocks.0._bn2.weight, %backbone_net.model._blocks.0._bn2.bias, %backbone_net.model._blocks.0._bn2.running_mean, %backbone_net.model._blocks.0._bn2.running_var, %618, %619, %620, %621), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%623 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%624 : int[] = prim::Constant[value=[1, 1]]()

%625 : int[] = prim::Constant[value=[0, 0]]()

%626 : int[] = prim::Constant[value=[1, 1]]()

%627 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%628 : int[] = prim::Constant[value=[0, 0]]()

%629 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%630 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%631 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%632 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.6 : Float(1, 96, 256, 256) = aten::_convolution(%622, %backbone_net.model._blocks.1._expand_conv.weight, %623, %624, %625, %626, %627, %628, %629, %630, %631, %632), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%634 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%635 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%636 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%637 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%638 : Float(1, 96, 256, 256) = aten::batch_norm(%input.6, %backbone_net.model._blocks.1._bn0.weight, %backbone_net.model._blocks.1._bn0.bias, %backbone_net.model._blocks.1._bn0.running_mean, %backbone_net.model._blocks.1._bn0.running_var, %634, %635, %636, %637), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%639 : Float(1, 96, 256, 256) = aten::sigmoid(%638), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.7 : Float(1, 96, 256, 256) = aten::mul(%638, %639), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%641 : int[] = prim::Constant[value=[0, 1, 0, 1]]()

%642 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%643 : Float(1, 96, 257, 257) = aten::constant_pad_nd(%input.7, %641, %642), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%644 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%645 : int[] = prim::Constant[value=[2, 2]]()

%646 : int[] = prim::Constant[value=[0, 0]]()

%647 : int[] = prim::Constant[value=[1, 1]]()

%648 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%649 : int[] = prim::Constant[value=[0, 0]]()

%650 : int = prim::Constant[value=96](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%651 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%652 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%653 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.8 : Float(1, 96, 128, 128) = aten::_convolution(%643, %backbone_net.model._blocks.1._depthwise_conv.weight, %644, %645, %646, %647, %648, %649, %650, %651, %652, %653), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%655 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%656 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%657 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%658 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%659 : Float(1, 96, 128, 128) = aten::batch_norm(%input.8, %backbone_net.model._blocks.1._bn1.weight, %backbone_net.model._blocks.1._bn1.bias, %backbone_net.model._blocks.1._bn1.running_mean, %backbone_net.model._blocks.1._bn1.running_var, %655, %656, %657, %658), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%660 : Float(1, 96, 128, 128) = aten::sigmoid(%659), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.2 : Float(1, 96, 128, 128) = aten::mul(%659, %660), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%662 : int[] = prim::Constant[value=[1, 1]]()

%663 : Float(1, 96, 1, 1) = aten::adaptive_avg_pool2d(%x.2, %662), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%664 : int[] = prim::Constant[value=[1, 1]]()

%665 : int[] = prim::Constant[value=[0, 0]]()

%666 : int[] = prim::Constant[value=[1, 1]]()

%667 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%668 : int[] = prim::Constant[value=[0, 0]]()

%669 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%670 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%671 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%672 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%673 : Float(1, 4, 1, 1) = aten::_convolution(%663, %backbone_net.model._blocks.1._se_reduce.weight, %backbone_net.model._blocks.1._se_reduce.bias, %664, %665, %666, %667, %668, %669, %670, %671, %672), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%674 : Float(1, 4, 1, 1) = aten::sigmoid(%673), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%675 : Float(1, 4, 1, 1) = aten::mul(%673, %674), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%676 : int[] = prim::Constant[value=[1, 1]]()

%677 : int[] = prim::Constant[value=[0, 0]]()

%678 : int[] = prim::Constant[value=[1, 1]]()

%679 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%680 : int[] = prim::Constant[value=[0, 0]]()

%681 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%682 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%683 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%684 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%685 : Float(1, 96, 1, 1) = aten::_convolution(%675, %backbone_net.model._blocks.1._se_expand.weight, %backbone_net.model._blocks.1._se_expand.bias, %676, %677, %678, %679, %680, %681, %682, %683, %684), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%686 : Float(1, 96, 1, 1) = aten::sigmoid(%685), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%687 : Float(1, 96, 128, 128) = aten::mul(%686, %x.2), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%688 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%689 : int[] = prim::Constant[value=[1, 1]]()

%690 : int[] = prim::Constant[value=[0, 0]]()

%691 : int[] = prim::Constant[value=[1, 1]]()

%692 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%693 : int[] = prim::Constant[value=[0, 0]]()

%694 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%695 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%696 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%697 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.9 : Float(1, 24, 128, 128) = aten::_convolution(%687, %backbone_net.model._blocks.1._project_conv.weight, %688, %689, %690, %691, %692, %693, %694, %695, %696, %697), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%699 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%700 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%701 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%702 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%703 : Float(1, 24, 128, 128) = aten::batch_norm(%input.9, %backbone_net.model._blocks.1._bn2.weight, %backbone_net.model._blocks.1._bn2.bias, %backbone_net.model._blocks.1._bn2.running_mean, %backbone_net.model._blocks.1._bn2.running_var, %699, %700, %701, %702), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%704 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%705 : int[] = prim::Constant[value=[1, 1]]()

%706 : int[] = prim::Constant[value=[0, 0]]()

%707 : int[] = prim::Constant[value=[1, 1]]()

%708 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%709 : int[] = prim::Constant[value=[0, 0]]()

%710 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%711 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%712 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%713 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.10 : Float(1, 144, 128, 128) = aten::_convolution(%703, %backbone_net.model._blocks.2._expand_conv.weight, %704, %705, %706, %707, %708, %709, %710, %711, %712, %713), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%715 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%716 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%717 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%718 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%719 : Float(1, 144, 128, 128) = aten::batch_norm(%input.10, %backbone_net.model._blocks.2._bn0.weight, %backbone_net.model._blocks.2._bn0.bias, %backbone_net.model._blocks.2._bn0.running_mean, %backbone_net.model._blocks.2._bn0.running_var, %715, %716, %717, %718), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%720 : Float(1, 144, 128, 128) = aten::sigmoid(%719), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.11 : Float(1, 144, 128, 128) = aten::mul(%719, %720), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%722 : int[] = prim::Constant[value=[1, 1, 1, 1]]()

%723 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%724 : Float(1, 144, 130, 130) = aten::constant_pad_nd(%input.11, %722, %723), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%725 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%726 : int[] = prim::Constant[value=[1, 1]]()

%727 : int[] = prim::Constant[value=[0, 0]]()

%728 : int[] = prim::Constant[value=[1, 1]]()

%729 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%730 : int[] = prim::Constant[value=[0, 0]]()

%731 : int = prim::Constant[value=144](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%732 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%733 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%734 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.12 : Float(1, 144, 128, 128) = aten::_convolution(%724, %backbone_net.model._blocks.2._depthwise_conv.weight, %725, %726, %727, %728, %729, %730, %731, %732, %733, %734), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%736 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%737 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%738 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%739 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%740 : Float(1, 144, 128, 128) = aten::batch_norm(%input.12, %backbone_net.model._blocks.2._bn1.weight, %backbone_net.model._blocks.2._bn1.bias, %backbone_net.model._blocks.2._bn1.running_mean, %backbone_net.model._blocks.2._bn1.running_var, %736, %737, %738, %739), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%741 : Float(1, 144, 128, 128) = aten::sigmoid(%740), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.3 : Float(1, 144, 128, 128) = aten::mul(%740, %741), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%743 : int[] = prim::Constant[value=[1, 1]]()

%744 : Float(1, 144, 1, 1) = aten::adaptive_avg_pool2d(%x.3, %743), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%745 : int[] = prim::Constant[value=[1, 1]]()

%746 : int[] = prim::Constant[value=[0, 0]]()

%747 : int[] = prim::Constant[value=[1, 1]]()

%748 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%749 : int[] = prim::Constant[value=[0, 0]]()

%750 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%751 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%752 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%753 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%754 : Float(1, 6, 1, 1) = aten::_convolution(%744, %backbone_net.model._blocks.2._se_reduce.weight, %backbone_net.model._blocks.2._se_reduce.bias, %745, %746, %747, %748, %749, %750, %751, %752, %753), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%755 : Float(1, 6, 1, 1) = aten::sigmoid(%754), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%756 : Float(1, 6, 1, 1) = aten::mul(%754, %755), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%757 : int[] = prim::Constant[value=[1, 1]]()

%758 : int[] = prim::Constant[value=[0, 0]]()

%759 : int[] = prim::Constant[value=[1, 1]]()

%760 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%761 : int[] = prim::Constant[value=[0, 0]]()

%762 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%763 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%764 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%765 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%766 : Float(1, 144, 1, 1) = aten::_convolution(%756, %backbone_net.model._blocks.2._se_expand.weight, %backbone_net.model._blocks.2._se_expand.bias, %757, %758, %759, %760, %761, %762, %763, %764, %765), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%767 : Float(1, 144, 1, 1) = aten::sigmoid(%766), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%768 : Float(1, 144, 128, 128) = aten::mul(%767, %x.3), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%769 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%770 : int[] = prim::Constant[value=[1, 1]]()

%771 : int[] = prim::Constant[value=[0, 0]]()

%772 : int[] = prim::Constant[value=[1, 1]]()

%773 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%774 : int[] = prim::Constant[value=[0, 0]]()

%775 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%776 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%777 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%778 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.13 : Float(1, 24, 128, 128) = aten::_convolution(%768, %backbone_net.model._blocks.2._project_conv.weight, %769, %770, %771, %772, %773, %774, %775, %776, %777, %778), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%780 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%781 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%782 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%783 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%784 : Float(1, 24, 128, 128) = aten::batch_norm(%input.13, %backbone_net.model._blocks.2._bn2.weight, %backbone_net.model._blocks.2._bn2.bias, %backbone_net.model._blocks.2._bn2.running_mean, %backbone_net.model._blocks.2._bn2.running_var, %780, %781, %782, %783), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%785 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%786 : Float(1, 24, 128, 128) = aten::add(%784, %703, %785), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%787 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%788 : int[] = prim::Constant[value=[1, 1]]()

%789 : int[] = prim::Constant[value=[0, 0]]()

%790 : int[] = prim::Constant[value=[1, 1]]()

%791 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%792 : int[] = prim::Constant[value=[0, 0]]()

%793 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%794 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%795 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%796 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.14 : Float(1, 144, 128, 128) = aten::_convolution(%786, %backbone_net.model._blocks.3._expand_conv.weight, %787, %788, %789, %790, %791, %792, %793, %794, %795, %796), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%798 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%799 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%800 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%801 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%802 : Float(1, 144, 128, 128) = aten::batch_norm(%input.14, %backbone_net.model._blocks.3._bn0.weight, %backbone_net.model._blocks.3._bn0.bias, %backbone_net.model._blocks.3._bn0.running_mean, %backbone_net.model._blocks.3._bn0.running_var, %798, %799, %800, %801), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%803 : Float(1, 144, 128, 128) = aten::sigmoid(%802), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.15 : Float(1, 144, 128, 128) = aten::mul(%802, %803), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%805 : int[] = prim::Constant[value=[1, 2, 1, 2]]()

%806 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%807 : Float(1, 144, 131, 131) = aten::constant_pad_nd(%input.15, %805, %806), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%808 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%809 : int[] = prim::Constant[value=[2, 2]]()

%810 : int[] = prim::Constant[value=[0, 0]]()

%811 : int[] = prim::Constant[value=[1, 1]]()

%812 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%813 : int[] = prim::Constant[value=[0, 0]]()

%814 : int = prim::Constant[value=144](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%815 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%816 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%817 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.16 : Float(1, 144, 64, 64) = aten::_convolution(%807, %backbone_net.model._blocks.3._depthwise_conv.weight, %808, %809, %810, %811, %812, %813, %814, %815, %816, %817), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%819 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%820 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%821 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%822 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%823 : Float(1, 144, 64, 64) = aten::batch_norm(%input.16, %backbone_net.model._blocks.3._bn1.weight, %backbone_net.model._blocks.3._bn1.bias, %backbone_net.model._blocks.3._bn1.running_mean, %backbone_net.model._blocks.3._bn1.running_var, %819, %820, %821, %822), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%824 : Float(1, 144, 64, 64) = aten::sigmoid(%823), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.4 : Float(1, 144, 64, 64) = aten::mul(%823, %824), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%826 : int[] = prim::Constant[value=[1, 1]]()

%827 : Float(1, 144, 1, 1) = aten::adaptive_avg_pool2d(%x.4, %826), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%828 : int[] = prim::Constant[value=[1, 1]]()

%829 : int[] = prim::Constant[value=[0, 0]]()

%830 : int[] = prim::Constant[value=[1, 1]]()

%831 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%832 : int[] = prim::Constant[value=[0, 0]]()

%833 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%834 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%835 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%836 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%837 : Float(1, 6, 1, 1) = aten::_convolution(%827, %backbone_net.model._blocks.3._se_reduce.weight, %backbone_net.model._blocks.3._se_reduce.bias, %828, %829, %830, %831, %832, %833, %834, %835, %836), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%838 : Float(1, 6, 1, 1) = aten::sigmoid(%837), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%839 : Float(1, 6, 1, 1) = aten::mul(%837, %838), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%840 : int[] = prim::Constant[value=[1, 1]]()

%841 : int[] = prim::Constant[value=[0, 0]]()

%842 : int[] = prim::Constant[value=[1, 1]]()

%843 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%844 : int[] = prim::Constant[value=[0, 0]]()

%845 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%846 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%847 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%848 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%849 : Float(1, 144, 1, 1) = aten::_convolution(%839, %backbone_net.model._blocks.3._se_expand.weight, %backbone_net.model._blocks.3._se_expand.bias, %840, %841, %842, %843, %844, %845, %846, %847, %848), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%850 : Float(1, 144, 1, 1) = aten::sigmoid(%849), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%851 : Float(1, 144, 64, 64) = aten::mul(%850, %x.4), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%852 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%853 : int[] = prim::Constant[value=[1, 1]]()

%854 : int[] = prim::Constant[value=[0, 0]]()

%855 : int[] = prim::Constant[value=[1, 1]]()

%856 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%857 : int[] = prim::Constant[value=[0, 0]]()

%858 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%859 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%860 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%861 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.17 : Float(1, 40, 64, 64) = aten::_convolution(%851, %backbone_net.model._blocks.3._project_conv.weight, %852, %853, %854, %855, %856, %857, %858, %859, %860, %861), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%863 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%864 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%865 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%866 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.66 : Float(1, 40, 64, 64) = aten::batch_norm(%input.17, %backbone_net.model._blocks.3._bn2.weight, %backbone_net.model._blocks.3._bn2.bias, %backbone_net.model._blocks.3._bn2.running_mean, %backbone_net.model._blocks.3._bn2.running_var, %863, %864, %865, %866), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%868 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%869 : int[] = prim::Constant[value=[1, 1]]()

%870 : int[] = prim::Constant[value=[0, 0]]()

%871 : int[] = prim::Constant[value=[1, 1]]()

%872 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%873 : int[] = prim::Constant[value=[0, 0]]()

%874 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%875 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%876 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%877 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.18 : Float(1, 240, 64, 64) = aten::_convolution(%input.66, %backbone_net.model._blocks.4._expand_conv.weight, %868, %869, %870, %871, %872, %873, %874, %875, %876, %877), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%879 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%880 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%881 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%882 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%883 : Float(1, 240, 64, 64) = aten::batch_norm(%input.18, %backbone_net.model._blocks.4._bn0.weight, %backbone_net.model._blocks.4._bn0.bias, %backbone_net.model._blocks.4._bn0.running_mean, %backbone_net.model._blocks.4._bn0.running_var, %879, %880, %881, %882), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%884 : Float(1, 240, 64, 64) = aten::sigmoid(%883), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.19 : Float(1, 240, 64, 64) = aten::mul(%883, %884), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%886 : int[] = prim::Constant[value=[2, 2, 2, 2]]()

%887 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%888 : Float(1, 240, 68, 68) = aten::constant_pad_nd(%input.19, %886, %887), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%889 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%890 : int[] = prim::Constant[value=[1, 1]]()

%891 : int[] = prim::Constant[value=[0, 0]]()

%892 : int[] = prim::Constant[value=[1, 1]]()

%893 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%894 : int[] = prim::Constant[value=[0, 0]]()

%895 : int = prim::Constant[value=240](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%896 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%897 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%898 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.20 : Float(1, 240, 64, 64) = aten::_convolution(%888, %backbone_net.model._blocks.4._depthwise_conv.weight, %889, %890, %891, %892, %893, %894, %895, %896, %897, %898), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%900 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%901 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%902 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%903 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%904 : Float(1, 240, 64, 64) = aten::batch_norm(%input.20, %backbone_net.model._blocks.4._bn1.weight, %backbone_net.model._blocks.4._bn1.bias, %backbone_net.model._blocks.4._bn1.running_mean, %backbone_net.model._blocks.4._bn1.running_var, %900, %901, %902, %903), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%905 : Float(1, 240, 64, 64) = aten::sigmoid(%904), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.5 : Float(1, 240, 64, 64) = aten::mul(%904, %905), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%907 : int[] = prim::Constant[value=[1, 1]]()

%908 : Float(1, 240, 1, 1) = aten::adaptive_avg_pool2d(%x.5, %907), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%909 : int[] = prim::Constant[value=[1, 1]]()

%910 : int[] = prim::Constant[value=[0, 0]]()

%911 : int[] = prim::Constant[value=[1, 1]]()

%912 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%913 : int[] = prim::Constant[value=[0, 0]]()

%914 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%915 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%916 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%917 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%918 : Float(1, 10, 1, 1) = aten::_convolution(%908, %backbone_net.model._blocks.4._se_reduce.weight, %backbone_net.model._blocks.4._se_reduce.bias, %909, %910, %911, %912, %913, %914, %915, %916, %917), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%919 : Float(1, 10, 1, 1) = aten::sigmoid(%918), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%920 : Float(1, 10, 1, 1) = aten::mul(%918, %919), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%921 : int[] = prim::Constant[value=[1, 1]]()

%922 : int[] = prim::Constant[value=[0, 0]]()

%923 : int[] = prim::Constant[value=[1, 1]]()

%924 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%925 : int[] = prim::Constant[value=[0, 0]]()

%926 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%927 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%928 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%929 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%930 : Float(1, 240, 1, 1) = aten::_convolution(%920, %backbone_net.model._blocks.4._se_expand.weight, %backbone_net.model._blocks.4._se_expand.bias, %921, %922, %923, %924, %925, %926, %927, %928, %929), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%931 : Float(1, 240, 1, 1) = aten::sigmoid(%930), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%932 : Float(1, 240, 64, 64) = aten::mul(%931, %x.5), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%933 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%934 : int[] = prim::Constant[value=[1, 1]]()

%935 : int[] = prim::Constant[value=[0, 0]]()

%936 : int[] = prim::Constant[value=[1, 1]]()

%937 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%938 : int[] = prim::Constant[value=[0, 0]]()

%939 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%940 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%941 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%942 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.21 : Float(1, 40, 64, 64) = aten::_convolution(%932, %backbone_net.model._blocks.4._project_conv.weight, %933, %934, %935, %936, %937, %938, %939, %940, %941, %942), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%944 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%945 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%946 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%947 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%948 : Float(1, 40, 64, 64) = aten::batch_norm(%input.21, %backbone_net.model._blocks.4._bn2.weight, %backbone_net.model._blocks.4._bn2.bias, %backbone_net.model._blocks.4._bn2.running_mean, %backbone_net.model._blocks.4._bn2.running_var, %944, %945, %946, %947), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%949 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%950 : Float(1, 40, 64, 64) = aten::add(%948, %input.66, %949), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%951 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%952 : int[] = prim::Constant[value=[1, 1]]()

%953 : int[] = prim::Constant[value=[0, 0]]()

%954 : int[] = prim::Constant[value=[1, 1]]()

%955 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%956 : int[] = prim::Constant[value=[0, 0]]()

%957 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%958 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%959 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%960 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.22 : Float(1, 240, 64, 64) = aten::_convolution(%950, %backbone_net.model._blocks.5._expand_conv.weight, %951, %952, %953, %954, %955, %956, %957, %958, %959, %960), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%962 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%963 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%964 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%965 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%966 : Float(1, 240, 64, 64) = aten::batch_norm(%input.22, %backbone_net.model._blocks.5._bn0.weight, %backbone_net.model._blocks.5._bn0.bias, %backbone_net.model._blocks.5._bn0.running_mean, %backbone_net.model._blocks.5._bn0.running_var, %962, %963, %964, %965), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%967 : Float(1, 240, 64, 64) = aten::sigmoid(%966), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.23 : Float(1, 240, 64, 64) = aten::mul(%966, %967), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%969 : int[] = prim::Constant[value=[0, 1, 0, 1]]()

%970 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%971 : Float(1, 240, 65, 65) = aten::constant_pad_nd(%input.23, %969, %970), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%972 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%973 : int[] = prim::Constant[value=[2, 2]]()

%974 : int[] = prim::Constant[value=[0, 0]]()

%975 : int[] = prim::Constant[value=[1, 1]]()

%976 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%977 : int[] = prim::Constant[value=[0, 0]]()

%978 : int = prim::Constant[value=240](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%979 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%980 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%981 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.24 : Float(1, 240, 32, 32) = aten::_convolution(%971, %backbone_net.model._blocks.5._depthwise_conv.weight, %972, %973, %974, %975, %976, %977, %978, %979, %980, %981), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%983 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%984 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%985 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%986 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%987 : Float(1, 240, 32, 32) = aten::batch_norm(%input.24, %backbone_net.model._blocks.5._bn1.weight, %backbone_net.model._blocks.5._bn1.bias, %backbone_net.model._blocks.5._bn1.running_mean, %backbone_net.model._blocks.5._bn1.running_var, %983, %984, %985, %986), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%988 : Float(1, 240, 32, 32) = aten::sigmoid(%987), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.6 : Float(1, 240, 32, 32) = aten::mul(%987, %988), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%990 : int[] = prim::Constant[value=[1, 1]]()

%991 : Float(1, 240, 1, 1) = aten::adaptive_avg_pool2d(%x.6, %990), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%992 : int[] = prim::Constant[value=[1, 1]]()

%993 : int[] = prim::Constant[value=[0, 0]]()

%994 : int[] = prim::Constant[value=[1, 1]]()

%995 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%996 : int[] = prim::Constant[value=[0, 0]]()

%997 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%998 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%999 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1000 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1001 : Float(1, 10, 1, 1) = aten::_convolution(%991, %backbone_net.model._blocks.5._se_reduce.weight, %backbone_net.model._blocks.5._se_reduce.bias, %992, %993, %994, %995, %996, %997, %998, %999, %1000), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1002 : Float(1, 10, 1, 1) = aten::sigmoid(%1001), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1003 : Float(1, 10, 1, 1) = aten::mul(%1001, %1002), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1004 : int[] = prim::Constant[value=[1, 1]]()

%1005 : int[] = prim::Constant[value=[0, 0]]()

%1006 : int[] = prim::Constant[value=[1, 1]]()

%1007 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1008 : int[] = prim::Constant[value=[0, 0]]()

%1009 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1010 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1011 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1012 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1013 : Float(1, 240, 1, 1) = aten::_convolution(%1003, %backbone_net.model._blocks.5._se_expand.weight, %backbone_net.model._blocks.5._se_expand.bias, %1004, %1005, %1006, %1007, %1008, %1009, %1010, %1011, %1012), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1014 : Float(1, 240, 1, 1) = aten::sigmoid(%1013), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1015 : Float(1, 240, 32, 32) = aten::mul(%1014, %x.6), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1016 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1017 : int[] = prim::Constant[value=[1, 1]]()

%1018 : int[] = prim::Constant[value=[0, 0]]()

%1019 : int[] = prim::Constant[value=[1, 1]]()

%1020 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1021 : int[] = prim::Constant[value=[0, 0]]()

%1022 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1023 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1024 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1025 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.25 : Float(1, 80, 32, 32) = aten::_convolution(%1015, %backbone_net.model._blocks.5._project_conv.weight, %1016, %1017, %1018, %1019, %1020, %1021, %1022, %1023, %1024, %1025), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1027 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1028 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1029 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1030 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.67 : Float(1, 80, 32, 32) = aten::batch_norm(%input.25, %backbone_net.model._blocks.5._bn2.weight, %backbone_net.model._blocks.5._bn2.bias, %backbone_net.model._blocks.5._bn2.running_mean, %backbone_net.model._blocks.5._bn2.running_var, %1027, %1028, %1029, %1030), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1032 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1033 : int[] = prim::Constant[value=[1, 1]]()

%1034 : int[] = prim::Constant[value=[0, 0]]()

%1035 : int[] = prim::Constant[value=[1, 1]]()

%1036 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1037 : int[] = prim::Constant[value=[0, 0]]()

%1038 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1039 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1040 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1041 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.26 : Float(1, 480, 32, 32) = aten::_convolution(%input.67, %backbone_net.model._blocks.6._expand_conv.weight, %1032, %1033, %1034, %1035, %1036, %1037, %1038, %1039, %1040, %1041), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1043 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1044 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1045 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1046 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1047 : Float(1, 480, 32, 32) = aten::batch_norm(%input.26, %backbone_net.model._blocks.6._bn0.weight, %backbone_net.model._blocks.6._bn0.bias, %backbone_net.model._blocks.6._bn0.running_mean, %backbone_net.model._blocks.6._bn0.running_var, %1043, %1044, %1045, %1046), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1048 : Float(1, 480, 32, 32) = aten::sigmoid(%1047), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.27 : Float(1, 480, 32, 32) = aten::mul(%1047, %1048), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1050 : int[] = prim::Constant[value=[1, 1, 1, 1]]()

%1051 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1052 : Float(1, 480, 34, 34) = aten::constant_pad_nd(%input.27, %1050, %1051), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1053 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1054 : int[] = prim::Constant[value=[1, 1]]()

%1055 : int[] = prim::Constant[value=[0, 0]]()

%1056 : int[] = prim::Constant[value=[1, 1]]()

%1057 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1058 : int[] = prim::Constant[value=[0, 0]]()

%1059 : int = prim::Constant[value=480](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1060 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1061 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1062 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.28 : Float(1, 480, 32, 32) = aten::_convolution(%1052, %backbone_net.model._blocks.6._depthwise_conv.weight, %1053, %1054, %1055, %1056, %1057, %1058, %1059, %1060, %1061, %1062), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1064 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1065 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1066 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1067 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1068 : Float(1, 480, 32, 32) = aten::batch_norm(%input.28, %backbone_net.model._blocks.6._bn1.weight, %backbone_net.model._blocks.6._bn1.bias, %backbone_net.model._blocks.6._bn1.running_mean, %backbone_net.model._blocks.6._bn1.running_var, %1064, %1065, %1066, %1067), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1069 : Float(1, 480, 32, 32) = aten::sigmoid(%1068), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.7 : Float(1, 480, 32, 32) = aten::mul(%1068, %1069), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1071 : int[] = prim::Constant[value=[1, 1]]()

%1072 : Float(1, 480, 1, 1) = aten::adaptive_avg_pool2d(%x.7, %1071), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1073 : int[] = prim::Constant[value=[1, 1]]()

%1074 : int[] = prim::Constant[value=[0, 0]]()

%1075 : int[] = prim::Constant[value=[1, 1]]()

%1076 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1077 : int[] = prim::Constant[value=[0, 0]]()

%1078 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1079 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1080 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1081 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1082 : Float(1, 20, 1, 1) = aten::_convolution(%1072, %backbone_net.model._blocks.6._se_reduce.weight, %backbone_net.model._blocks.6._se_reduce.bias, %1073, %1074, %1075, %1076, %1077, %1078, %1079, %1080, %1081), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1083 : Float(1, 20, 1, 1) = aten::sigmoid(%1082), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1084 : Float(1, 20, 1, 1) = aten::mul(%1082, %1083), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1085 : int[] = prim::Constant[value=[1, 1]]()

%1086 : int[] = prim::Constant[value=[0, 0]]()

%1087 : int[] = prim::Constant[value=[1, 1]]()

%1088 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1089 : int[] = prim::Constant[value=[0, 0]]()

%1090 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1091 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1092 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1093 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1094 : Float(1, 480, 1, 1) = aten::_convolution(%1084, %backbone_net.model._blocks.6._se_expand.weight, %backbone_net.model._blocks.6._se_expand.bias, %1085, %1086, %1087, %1088, %1089, %1090, %1091, %1092, %1093), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1095 : Float(1, 480, 1, 1) = aten::sigmoid(%1094), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1096 : Float(1, 480, 32, 32) = aten::mul(%1095, %x.7), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1097 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1098 : int[] = prim::Constant[value=[1, 1]]()

%1099 : int[] = prim::Constant[value=[0, 0]]()

%1100 : int[] = prim::Constant[value=[1, 1]]()

%1101 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1102 : int[] = prim::Constant[value=[0, 0]]()

%1103 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1104 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1105 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1106 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.29 : Float(1, 80, 32, 32) = aten::_convolution(%1096, %backbone_net.model._blocks.6._project_conv.weight, %1097, %1098, %1099, %1100, %1101, %1102, %1103, %1104, %1105, %1106), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1108 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1109 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1110 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1111 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1112 : Float(1, 80, 32, 32) = aten::batch_norm(%input.29, %backbone_net.model._blocks.6._bn2.weight, %backbone_net.model._blocks.6._bn2.bias, %backbone_net.model._blocks.6._bn2.running_mean, %backbone_net.model._blocks.6._bn2.running_var, %1108, %1109, %1110, %1111), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1113 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1114 : Float(1, 80, 32, 32) = aten::add(%1112, %input.67, %1113), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1115 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1116 : int[] = prim::Constant[value=[1, 1]]()

%1117 : int[] = prim::Constant[value=[0, 0]]()

%1118 : int[] = prim::Constant[value=[1, 1]]()

%1119 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1120 : int[] = prim::Constant[value=[0, 0]]()

%1121 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1122 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1123 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1124 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.30 : Float(1, 480, 32, 32) = aten::_convolution(%1114, %backbone_net.model._blocks.7._expand_conv.weight, %1115, %1116, %1117, %1118, %1119, %1120, %1121, %1122, %1123, %1124), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1126 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1127 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1128 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1129 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1130 : Float(1, 480, 32, 32) = aten::batch_norm(%input.30, %backbone_net.model._blocks.7._bn0.weight, %backbone_net.model._blocks.7._bn0.bias, %backbone_net.model._blocks.7._bn0.running_mean, %backbone_net.model._blocks.7._bn0.running_var, %1126, %1127, %1128, %1129), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1131 : Float(1, 480, 32, 32) = aten::sigmoid(%1130), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.31 : Float(1, 480, 32, 32) = aten::mul(%1130, %1131), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1133 : int[] = prim::Constant[value=[1, 1, 1, 1]]()

%1134 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1135 : Float(1, 480, 34, 34) = aten::constant_pad_nd(%input.31, %1133, %1134), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1136 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1137 : int[] = prim::Constant[value=[1, 1]]()

%1138 : int[] = prim::Constant[value=[0, 0]]()

%1139 : int[] = prim::Constant[value=[1, 1]]()

%1140 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1141 : int[] = prim::Constant[value=[0, 0]]()

%1142 : int = prim::Constant[value=480](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1143 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1144 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1145 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.32 : Float(1, 480, 32, 32) = aten::_convolution(%1135, %backbone_net.model._blocks.7._depthwise_conv.weight, %1136, %1137, %1138, %1139, %1140, %1141, %1142, %1143, %1144, %1145), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1147 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1148 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1149 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1150 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1151 : Float(1, 480, 32, 32) = aten::batch_norm(%input.32, %backbone_net.model._blocks.7._bn1.weight, %backbone_net.model._blocks.7._bn1.bias, %backbone_net.model._blocks.7._bn1.running_mean, %backbone_net.model._blocks.7._bn1.running_var, %1147, %1148, %1149, %1150), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1152 : Float(1, 480, 32, 32) = aten::sigmoid(%1151), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.8 : Float(1, 480, 32, 32) = aten::mul(%1151, %1152), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1154 : int[] = prim::Constant[value=[1, 1]]()

%1155 : Float(1, 480, 1, 1) = aten::adaptive_avg_pool2d(%x.8, %1154), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1156 : int[] = prim::Constant[value=[1, 1]]()

%1157 : int[] = prim::Constant[value=[0, 0]]()

%1158 : int[] = prim::Constant[value=[1, 1]]()

%1159 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1160 : int[] = prim::Constant[value=[0, 0]]()

%1161 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1162 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1163 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1164 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1165 : Float(1, 20, 1, 1) = aten::_convolution(%1155, %backbone_net.model._blocks.7._se_reduce.weight, %backbone_net.model._blocks.7._se_reduce.bias, %1156, %1157, %1158, %1159, %1160, %1161, %1162, %1163, %1164), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1166 : Float(1, 20, 1, 1) = aten::sigmoid(%1165), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1167 : Float(1, 20, 1, 1) = aten::mul(%1165, %1166), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1168 : int[] = prim::Constant[value=[1, 1]]()

%1169 : int[] = prim::Constant[value=[0, 0]]()

%1170 : int[] = prim::Constant[value=[1, 1]]()

%1171 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1172 : int[] = prim::Constant[value=[0, 0]]()

%1173 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1174 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1175 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1176 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1177 : Float(1, 480, 1, 1) = aten::_convolution(%1167, %backbone_net.model._blocks.7._se_expand.weight, %backbone_net.model._blocks.7._se_expand.bias, %1168, %1169, %1170, %1171, %1172, %1173, %1174, %1175, %1176), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1178 : Float(1, 480, 1, 1) = aten::sigmoid(%1177), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1179 : Float(1, 480, 32, 32) = aten::mul(%1178, %x.8), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1180 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1181 : int[] = prim::Constant[value=[1, 1]]()

%1182 : int[] = prim::Constant[value=[0, 0]]()

%1183 : int[] = prim::Constant[value=[1, 1]]()

%1184 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1185 : int[] = prim::Constant[value=[0, 0]]()

%1186 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1187 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1188 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1189 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.33 : Float(1, 80, 32, 32) = aten::_convolution(%1179, %backbone_net.model._blocks.7._project_conv.weight, %1180, %1181, %1182, %1183, %1184, %1185, %1186, %1187, %1188, %1189), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1191 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1192 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1193 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1194 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1195 : Float(1, 80, 32, 32) = aten::batch_norm(%input.33, %backbone_net.model._blocks.7._bn2.weight, %backbone_net.model._blocks.7._bn2.bias, %backbone_net.model._blocks.7._bn2.running_mean, %backbone_net.model._blocks.7._bn2.running_var, %1191, %1192, %1193, %1194), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1196 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1197 : Float(1, 80, 32, 32) = aten::add(%1195, %1114, %1196), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1198 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1199 : int[] = prim::Constant[value=[1, 1]]()

%1200 : int[] = prim::Constant[value=[0, 0]]()

%1201 : int[] = prim::Constant[value=[1, 1]]()

%1202 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1203 : int[] = prim::Constant[value=[0, 0]]()

%1204 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1205 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1206 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1207 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.34 : Float(1, 480, 32, 32) = aten::_convolution(%1197, %backbone_net.model._blocks.8._expand_conv.weight, %1198, %1199, %1200, %1201, %1202, %1203, %1204, %1205, %1206, %1207), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1209 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1210 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1211 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1212 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1213 : Float(1, 480, 32, 32) = aten::batch_norm(%input.34, %backbone_net.model._blocks.8._bn0.weight, %backbone_net.model._blocks.8._bn0.bias, %backbone_net.model._blocks.8._bn0.running_mean, %backbone_net.model._blocks.8._bn0.running_var, %1209, %1210, %1211, %1212), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1214 : Float(1, 480, 32, 32) = aten::sigmoid(%1213), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.35 : Float(1, 480, 32, 32) = aten::mul(%1213, %1214), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1216 : int[] = prim::Constant[value=[2, 2, 2, 2]]()

%1217 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1218 : Float(1, 480, 36, 36) = aten::constant_pad_nd(%input.35, %1216, %1217), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1219 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1220 : int[] = prim::Constant[value=[1, 1]]()

%1221 : int[] = prim::Constant[value=[0, 0]]()

%1222 : int[] = prim::Constant[value=[1, 1]]()

%1223 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1224 : int[] = prim::Constant[value=[0, 0]]()

%1225 : int = prim::Constant[value=480](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1226 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1227 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1228 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.36 : Float(1, 480, 32, 32) = aten::_convolution(%1218, %backbone_net.model._blocks.8._depthwise_conv.weight, %1219, %1220, %1221, %1222, %1223, %1224, %1225, %1226, %1227, %1228), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1230 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1231 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1232 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1233 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1234 : Float(1, 480, 32, 32) = aten::batch_norm(%input.36, %backbone_net.model._blocks.8._bn1.weight, %backbone_net.model._blocks.8._bn1.bias, %backbone_net.model._blocks.8._bn1.running_mean, %backbone_net.model._blocks.8._bn1.running_var, %1230, %1231, %1232, %1233), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1235 : Float(1, 480, 32, 32) = aten::sigmoid(%1234), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.9 : Float(1, 480, 32, 32) = aten::mul(%1234, %1235), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1237 : int[] = prim::Constant[value=[1, 1]]()

%1238 : Float(1, 480, 1, 1) = aten::adaptive_avg_pool2d(%x.9, %1237), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1239 : int[] = prim::Constant[value=[1, 1]]()

%1240 : int[] = prim::Constant[value=[0, 0]]()

%1241 : int[] = prim::Constant[value=[1, 1]]()

%1242 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1243 : int[] = prim::Constant[value=[0, 0]]()

%1244 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1245 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1246 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1247 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1248 : Float(1, 20, 1, 1) = aten::_convolution(%1238, %backbone_net.model._blocks.8._se_reduce.weight, %backbone_net.model._blocks.8._se_reduce.bias, %1239, %1240, %1241, %1242, %1243, %1244, %1245, %1246, %1247), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1249 : Float(1, 20, 1, 1) = aten::sigmoid(%1248), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1250 : Float(1, 20, 1, 1) = aten::mul(%1248, %1249), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1251 : int[] = prim::Constant[value=[1, 1]]()

%1252 : int[] = prim::Constant[value=[0, 0]]()

%1253 : int[] = prim::Constant[value=[1, 1]]()

%1254 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1255 : int[] = prim::Constant[value=[0, 0]]()

%1256 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1257 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1258 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1259 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1260 : Float(1, 480, 1, 1) = aten::_convolution(%1250, %backbone_net.model._blocks.8._se_expand.weight, %backbone_net.model._blocks.8._se_expand.bias, %1251, %1252, %1253, %1254, %1255, %1256, %1257, %1258, %1259), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1261 : Float(1, 480, 1, 1) = aten::sigmoid(%1260), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1262 : Float(1, 480, 32, 32) = aten::mul(%1261, %x.9), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1263 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1264 : int[] = prim::Constant[value=[1, 1]]()

%1265 : int[] = prim::Constant[value=[0, 0]]()

%1266 : int[] = prim::Constant[value=[1, 1]]()

%1267 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1268 : int[] = prim::Constant[value=[0, 0]]()

%1269 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1270 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1271 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1272 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.37 : Float(1, 112, 32, 32) = aten::_convolution(%1262, %backbone_net.model._blocks.8._project_conv.weight, %1263, %1264, %1265, %1266, %1267, %1268, %1269, %1270, %1271, %1272), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1274 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1275 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1276 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1277 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1278 : Float(1, 112, 32, 32) = aten::batch_norm(%input.37, %backbone_net.model._blocks.8._bn2.weight, %backbone_net.model._blocks.8._bn2.bias, %backbone_net.model._blocks.8._bn2.running_mean, %backbone_net.model._blocks.8._bn2.running_var, %1274, %1275, %1276, %1277), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1279 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1280 : int[] = prim::Constant[value=[1, 1]]()

%1281 : int[] = prim::Constant[value=[0, 0]]()

%1282 : int[] = prim::Constant[value=[1, 1]]()

%1283 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1284 : int[] = prim::Constant[value=[0, 0]]()

%1285 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1286 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1287 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1288 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.38 : Float(1, 672, 32, 32) = aten::_convolution(%1278, %backbone_net.model._blocks.9._expand_conv.weight, %1279, %1280, %1281, %1282, %1283, %1284, %1285, %1286, %1287, %1288), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1290 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1291 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1292 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1293 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1294 : Float(1, 672, 32, 32) = aten::batch_norm(%input.38, %backbone_net.model._blocks.9._bn0.weight, %backbone_net.model._blocks.9._bn0.bias, %backbone_net.model._blocks.9._bn0.running_mean, %backbone_net.model._blocks.9._bn0.running_var, %1290, %1291, %1292, %1293), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1295 : Float(1, 672, 32, 32) = aten::sigmoid(%1294), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.39 : Float(1, 672, 32, 32) = aten::mul(%1294, %1295), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1297 : int[] = prim::Constant[value=[2, 2, 2, 2]]()

%1298 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1299 : Float(1, 672, 36, 36) = aten::constant_pad_nd(%input.39, %1297, %1298), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1300 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1301 : int[] = prim::Constant[value=[1, 1]]()

%1302 : int[] = prim::Constant[value=[0, 0]]()

%1303 : int[] = prim::Constant[value=[1, 1]]()

%1304 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1305 : int[] = prim::Constant[value=[0, 0]]()

%1306 : int = prim::Constant[value=672](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1307 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1308 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1309 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.40 : Float(1, 672, 32, 32) = aten::_convolution(%1299, %backbone_net.model._blocks.9._depthwise_conv.weight, %1300, %1301, %1302, %1303, %1304, %1305, %1306, %1307, %1308, %1309), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1311 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1312 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1313 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1314 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1315 : Float(1, 672, 32, 32) = aten::batch_norm(%input.40, %backbone_net.model._blocks.9._bn1.weight, %backbone_net.model._blocks.9._bn1.bias, %backbone_net.model._blocks.9._bn1.running_mean, %backbone_net.model._blocks.9._bn1.running_var, %1311, %1312, %1313, %1314), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1316 : Float(1, 672, 32, 32) = aten::sigmoid(%1315), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.10 : Float(1, 672, 32, 32) = aten::mul(%1315, %1316), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1318 : int[] = prim::Constant[value=[1, 1]]()

%1319 : Float(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%x.10, %1318), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1320 : int[] = prim::Constant[value=[1, 1]]()

%1321 : int[] = prim::Constant[value=[0, 0]]()

%1322 : int[] = prim::Constant[value=[1, 1]]()

%1323 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1324 : int[] = prim::Constant[value=[0, 0]]()

%1325 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1326 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1327 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1328 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1329 : Float(1, 28, 1, 1) = aten::_convolution(%1319, %backbone_net.model._blocks.9._se_reduce.weight, %backbone_net.model._blocks.9._se_reduce.bias, %1320, %1321, %1322, %1323, %1324, %1325, %1326, %1327, %1328), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1330 : Float(1, 28, 1, 1) = aten::sigmoid(%1329), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1331 : Float(1, 28, 1, 1) = aten::mul(%1329, %1330), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1332 : int[] = prim::Constant[value=[1, 1]]()

%1333 : int[] = prim::Constant[value=[0, 0]]()

%1334 : int[] = prim::Constant[value=[1, 1]]()

%1335 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1336 : int[] = prim::Constant[value=[0, 0]]()

%1337 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1338 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1339 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1340 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1341 : Float(1, 672, 1, 1) = aten::_convolution(%1331, %backbone_net.model._blocks.9._se_expand.weight, %backbone_net.model._blocks.9._se_expand.bias, %1332, %1333, %1334, %1335, %1336, %1337, %1338, %1339, %1340), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1342 : Float(1, 672, 1, 1) = aten::sigmoid(%1341), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1343 : Float(1, 672, 32, 32) = aten::mul(%1342, %x.10), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1344 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1345 : int[] = prim::Constant[value=[1, 1]]()

%1346 : int[] = prim::Constant[value=[0, 0]]()

%1347 : int[] = prim::Constant[value=[1, 1]]()

%1348 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1349 : int[] = prim::Constant[value=[0, 0]]()

%1350 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1351 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1352 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1353 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.41 : Float(1, 112, 32, 32) = aten::_convolution(%1343, %backbone_net.model._blocks.9._project_conv.weight, %1344, %1345, %1346, %1347, %1348, %1349, %1350, %1351, %1352, %1353), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1355 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1356 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1357 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1358 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1359 : Float(1, 112, 32, 32) = aten::batch_norm(%input.41, %backbone_net.model._blocks.9._bn2.weight, %backbone_net.model._blocks.9._bn2.bias, %backbone_net.model._blocks.9._bn2.running_mean, %backbone_net.model._blocks.9._bn2.running_var, %1355, %1356, %1357, %1358), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1360 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1361 : Float(1, 112, 32, 32) = aten::add(%1359, %1278, %1360), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1362 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1363 : int[] = prim::Constant[value=[1, 1]]()

%1364 : int[] = prim::Constant[value=[0, 0]]()

%1365 : int[] = prim::Constant[value=[1, 1]]()

%1366 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1367 : int[] = prim::Constant[value=[0, 0]]()

%1368 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1369 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1370 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1371 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.42 : Float(1, 672, 32, 32) = aten::_convolution(%1361, %backbone_net.model._blocks.10._expand_conv.weight, %1362, %1363, %1364, %1365, %1366, %1367, %1368, %1369, %1370, %1371), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1373 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1374 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1375 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1376 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1377 : Float(1, 672, 32, 32) = aten::batch_norm(%input.42, %backbone_net.model._blocks.10._bn0.weight, %backbone_net.model._blocks.10._bn0.bias, %backbone_net.model._blocks.10._bn0.running_mean, %backbone_net.model._blocks.10._bn0.running_var, %1373, %1374, %1375, %1376), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1378 : Float(1, 672, 32, 32) = aten::sigmoid(%1377), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.43 : Float(1, 672, 32, 32) = aten::mul(%1377, %1378), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1380 : int[] = prim::Constant[value=[2, 2, 2, 2]]()

%1381 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1382 : Float(1, 672, 36, 36) = aten::constant_pad_nd(%input.43, %1380, %1381), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1383 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1384 : int[] = prim::Constant[value=[1, 1]]()

%1385 : int[] = prim::Constant[value=[0, 0]]()

%1386 : int[] = prim::Constant[value=[1, 1]]()

%1387 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1388 : int[] = prim::Constant[value=[0, 0]]()

%1389 : int = prim::Constant[value=672](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1390 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1391 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1392 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.44 : Float(1, 672, 32, 32) = aten::_convolution(%1382, %backbone_net.model._blocks.10._depthwise_conv.weight, %1383, %1384, %1385, %1386, %1387, %1388, %1389, %1390, %1391, %1392), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1394 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1395 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1396 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1397 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1398 : Float(1, 672, 32, 32) = aten::batch_norm(%input.44, %backbone_net.model._blocks.10._bn1.weight, %backbone_net.model._blocks.10._bn1.bias, %backbone_net.model._blocks.10._bn1.running_mean, %backbone_net.model._blocks.10._bn1.running_var, %1394, %1395, %1396, %1397), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1399 : Float(1, 672, 32, 32) = aten::sigmoid(%1398), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.11 : Float(1, 672, 32, 32) = aten::mul(%1398, %1399), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1401 : int[] = prim::Constant[value=[1, 1]]()

%1402 : Float(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%x.11, %1401), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1403 : int[] = prim::Constant[value=[1, 1]]()

%1404 : int[] = prim::Constant[value=[0, 0]]()

%1405 : int[] = prim::Constant[value=[1, 1]]()

%1406 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1407 : int[] = prim::Constant[value=[0, 0]]()

%1408 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1409 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1410 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1411 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1412 : Float(1, 28, 1, 1) = aten::_convolution(%1402, %backbone_net.model._blocks.10._se_reduce.weight, %backbone_net.model._blocks.10._se_reduce.bias, %1403, %1404, %1405, %1406, %1407, %1408, %1409, %1410, %1411), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1413 : Float(1, 28, 1, 1) = aten::sigmoid(%1412), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1414 : Float(1, 28, 1, 1) = aten::mul(%1412, %1413), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1415 : int[] = prim::Constant[value=[1, 1]]()

%1416 : int[] = prim::Constant[value=[0, 0]]()

%1417 : int[] = prim::Constant[value=[1, 1]]()

%1418 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1419 : int[] = prim::Constant[value=[0, 0]]()

%1420 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1421 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1422 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1423 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1424 : Float(1, 672, 1, 1) = aten::_convolution(%1414, %backbone_net.model._blocks.10._se_expand.weight, %backbone_net.model._blocks.10._se_expand.bias, %1415, %1416, %1417, %1418, %1419, %1420, %1421, %1422, %1423), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1425 : Float(1, 672, 1, 1) = aten::sigmoid(%1424), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1426 : Float(1, 672, 32, 32) = aten::mul(%1425, %x.11), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1427 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1428 : int[] = prim::Constant[value=[1, 1]]()

%1429 : int[] = prim::Constant[value=[0, 0]]()

%1430 : int[] = prim::Constant[value=[1, 1]]()

%1431 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1432 : int[] = prim::Constant[value=[0, 0]]()

%1433 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1434 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1435 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1436 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.45 : Float(1, 112, 32, 32) = aten::_convolution(%1426, %backbone_net.model._blocks.10._project_conv.weight, %1427, %1428, %1429, %1430, %1431, %1432, %1433, %1434, %1435, %1436), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1438 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1439 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1440 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1441 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1442 : Float(1, 112, 32, 32) = aten::batch_norm(%input.45, %backbone_net.model._blocks.10._bn2.weight, %backbone_net.model._blocks.10._bn2.bias, %backbone_net.model._blocks.10._bn2.running_mean, %backbone_net.model._blocks.10._bn2.running_var, %1438, %1439, %1440, %1441), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1443 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1444 : Float(1, 112, 32, 32) = aten::add(%1442, %1361, %1443), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:93:0

%1445 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv]

%1446 : int[] = prim::Constant[value=[1, 1]]()

%1447 : int[] = prim::Constant[value=[0, 0]]()

%1448 : int[] = prim::Constant[value=[1, 1]]()

%1449 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1450 : int[] = prim::Constant[value=[0, 0]]()

%1451 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1452 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1453 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1454 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.46 : Float(1, 672, 32, 32) = aten::_convolution(%1444, %backbone_net.model._blocks.11._expand_conv.weight, %1445, %1446, %1447, %1448, %1449, %1450, %1451, %1452, %1453, %1454), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_expand_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1456 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1457 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1458 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1459 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1460 : Float(1, 672, 32, 32) = aten::batch_norm(%input.46, %backbone_net.model._blocks.11._bn0.weight, %backbone_net.model._blocks.11._bn0.bias, %backbone_net.model._blocks.11._bn0.running_mean, %backbone_net.model._blocks.11._bn0.running_var, %1456, %1457, %1458, %1459), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1461 : Float(1, 672, 32, 32) = aten::sigmoid(%1460), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%input.47 : Float(1, 672, 32, 32) = aten::mul(%1460, %1461), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1463 : int[] = prim::Constant[value=[1, 2, 1, 2]]()

%1464 : float = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1465 : Float(1, 672, 35, 35) = aten::constant_pad_nd(%input.47, %1463, %1464), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]/ZeroPad2d[static_padding] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2862:0

%1466 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv]

%1467 : int[] = prim::Constant[value=[2, 2]]()

%1468 : int[] = prim::Constant[value=[0, 0]]()

%1469 : int[] = prim::Constant[value=[1, 1]]()

%1470 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1471 : int[] = prim::Constant[value=[0, 0]]()

%1472 : int = prim::Constant[value=672](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1473 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1474 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1475 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.48 : Float(1, 672, 16, 16) = aten::_convolution(%1465, %backbone_net.model._blocks.11._depthwise_conv.weight, %1466, %1467, %1468, %1469, %1470, %1471, %1472, %1473, %1474, %1475), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_depthwise_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1477 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1478 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1479 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1480 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1481 : Float(1, 672, 16, 16) = aten::batch_norm(%input.48, %backbone_net.model._blocks.11._bn1.weight, %backbone_net.model._blocks.11._bn1.bias, %backbone_net.model._blocks.11._bn1.running_mean, %backbone_net.model._blocks.11._bn1.running_var, %1477, %1478, %1479, %1480), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1482 : Float(1, 672, 16, 16) = aten::sigmoid(%1481), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%x.12 : Float(1, 672, 16, 16) = aten::mul(%1481, %1482), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1484 : int[] = prim::Constant[value=[1, 1]]()

%1485 : Float(1, 672, 1, 1) = aten::adaptive_avg_pool2d(%x.12, %1484), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:768:0

%1486 : int[] = prim::Constant[value=[1, 1]]()

%1487 : int[] = prim::Constant[value=[0, 0]]()

%1488 : int[] = prim::Constant[value=[1, 1]]()

%1489 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1490 : int[] = prim::Constant[value=[0, 0]]()

%1491 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1492 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1493 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1494 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1495 : Float(1, 28, 1, 1) = aten::_convolution(%1485, %backbone_net.model._blocks.11._se_reduce.weight, %backbone_net.model._blocks.11._se_reduce.bias, %1486, %1487, %1488, %1489, %1490, %1491, %1492, %1493, %1494), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_reduce] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1496 : Float(1, 28, 1, 1) = aten::sigmoid(%1495), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1497 : Float(1, 28, 1, 1) = aten::mul(%1495, %1496), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Swish[_swish] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:56:0

%1498 : int[] = prim::Constant[value=[1, 1]]()

%1499 : int[] = prim::Constant[value=[0, 0]]()

%1500 : int[] = prim::Constant[value=[1, 1]]()

%1501 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1502 : int[] = prim::Constant[value=[0, 0]]()

%1503 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1504 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1505 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1506 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1507 : Float(1, 672, 1, 1) = aten::_convolution(%1497, %backbone_net.model._blocks.11._se_expand.weight, %backbone_net.model._blocks.11._se_expand.bias, %1498, %1499, %1500, %1501, %1502, %1503, %1504, %1505, %1506), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_se_expand] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1508 : Float(1, 672, 1, 1) = aten::sigmoid(%1507), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1509 : Float(1, 672, 16, 16) = aten::mul(%1508, %x.12), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/model.py:84:0

%1510 : None = prim::Constant(), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv]

%1511 : int[] = prim::Constant[value=[1, 1]]()

%1512 : int[] = prim::Constant[value=[0, 0]]()

%1513 : int[] = prim::Constant[value=[1, 1]]()

%1514 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1515 : int[] = prim::Constant[value=[0, 0]]()

%1516 : int = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1517 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1518 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1519 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%input.49 : Float(1, 192, 16, 16) = aten::_convolution(%1509, %backbone_net.model._blocks.11._project_conv.weight, %1510, %1511, %1512, %1513, %1514, %1515, %1516, %1517, %1518, %1519), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/Conv2dStaticSamePadding[_project_conv] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/efficientnet_pytorch/utils.py:144:0

%1521 : bool = prim::Constant[value=0](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1522 : float = prim::Constant[value=0.01](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1523 : float = prim::Constant[value=0.001](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1524 : bool = prim::Constant[value=1](), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.68 : Float(1, 192, 16, 16) = aten::batch_norm(%input.49, %backbone_net.model._blocks.11._bn2.weight, %backbone_net.model._blocks.11._bn2.bias, %backbone_net.model._blocks.11._bn2.running_mean, %backbone_net.model._blocks.11._bn2.running_var, %1521, %1522, %1523, %1524), scope: EfficientDet/EfficientNet[backbone_net]/MBConvBlock/BatchNorm2d[_bn2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1526 : int[] = prim::Constant[value=[1, 1]]()

%1527 : int[] = prim::Constant[value=[0, 0]]()

%1528 : int[] = prim::Constant[value=[1, 1]]()

%1529 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1530 : int[] = prim::Constant[value=[0, 0]]()

%1531 : int = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1532 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1533 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1534 : bool = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1535 : Float(1, 64, 64, 64) = aten::_convolution(%input.66, %conv3.weight, %conv3.bias, %1526, %1527, %1528, %1529, %1530, %1531, %1532, %1533, %1534), scope: EfficientDet/Conv2d[conv3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1536 : int[] = prim::Constant[value=[1, 1]]()

%1537 : int[] = prim::Constant[value=[0, 0]]()

%1538 : int[] = prim::Constant[value=[1, 1]]()

%1539 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1540 : int[] = prim::Constant[value=[0, 0]]()

%1541 : int = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1542 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1543 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1544 : bool = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1545 : Float(1, 64, 32, 32) = aten::_convolution(%input.67, %conv4.weight, %conv4.bias, %1536, %1537, %1538, %1539, %1540, %1541, %1542, %1543, %1544), scope: EfficientDet/Conv2d[conv4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1546 : int[] = prim::Constant[value=[1, 1]]()

%1547 : int[] = prim::Constant[value=[0, 0]]()

%1548 : int[] = prim::Constant[value=[1, 1]]()

%1549 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1550 : int[] = prim::Constant[value=[0, 0]]()

%1551 : int = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1552 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1553 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1554 : bool = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1555 : Float(1, 64, 16, 16) = aten::_convolution(%input.68, %conv5.weight, %conv5.bias, %1546, %1547, %1548, %1549, %1550, %1551, %1552, %1553, %1554), scope: EfficientDet/Conv2d[conv5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1556 : int[] = prim::Constant[value=[2, 2]]()

%1557 : int[] = prim::Constant[value=[1, 1]]()

%1558 : int[] = prim::Constant[value=[1, 1]]()

%1559 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1560 : int[] = prim::Constant[value=[0, 0]]()

%1561 : int = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1562 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1563 : bool = prim::Constant[value=0](), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1564 : bool = prim::Constant[value=1](), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.69 : Float(1, 64, 8, 8) = aten::_convolution(%input.68, %conv6.weight, %conv6.bias, %1556, %1557, %1558, %1559, %1560, %1561, %1562, %1563, %1564), scope: EfficientDet/Conv2d[conv6] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.70 : Float(1, 64, 8, 8) = aten::relu(%input.69), scope: EfficientDet/Sequential[conv7]/ReLU[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1567 : int[] = prim::Constant[value=[2, 2]]()

%1568 : int[] = prim::Constant[value=[1, 1]]()

%1569 : int[] = prim::Constant[value=[1, 1]]()

%1570 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1571 : int[] = prim::Constant[value=[0, 0]]()

%1572 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1573 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1574 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1575 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.72 : Float(1, 64, 4, 4) = aten::_convolution(%input.70, %conv7.1.weight, %conv7.1.bias, %1567, %1568, %1569, %1570, %1571, %1572, %1573, %1574, %1575), scope: EfficientDet/Sequential[conv7]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1577 : Float(2) = aten::relu(%bifpn.0.p6_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p6_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1578 : int[] = prim::Constant[value=[0]]()

%1579 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1580 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1581 : Float() = aten::sum(%1577, %1578, %1579, %1580), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1582 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1583 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1584 : Float() = aten::add(%1581, %1582, %1583), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1585 : Float(2) = aten::div(%1577, %1584), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%1586 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1587 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1588 : Float() = aten::select(%1585, %1586, %1587), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1589 : Float(1, 64, 8, 8) = aten::mul(%1588, %input.69), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1590 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1591 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1592 : Float() = aten::select(%1585, %1590, %1591), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1593 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1594 : int = aten::size(%input.72, %1593), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1595 : Long() = prim::NumToTensor(%1594), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1596 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1597 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1598 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1599 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1600 : Float() = aten::to(%1595, %1596, %1597, %1598, %1599), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1601 : Float() = prim::Constant[value={2}]()

%1602 : Float() = aten::mul(%1600, %1601), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1603 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1604 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1605 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1606 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1607 : Float() = aten::to(%1602, %1603, %1604, %1605, %1606), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1608 : Float() = aten::floor(%1607), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1609 : int = aten::Int(%1608), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1610 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1611 : int = aten::size(%input.72, %1610), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1612 : Long() = prim::NumToTensor(%1611), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1613 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1614 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1615 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1616 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1617 : Float() = aten::to(%1612, %1613, %1614, %1615, %1616), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1618 : Float() = prim::Constant[value={2}]()

%1619 : Float() = aten::mul(%1617, %1618), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1620 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1621 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1622 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1623 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1624 : Float() = aten::to(%1619, %1620, %1621, %1622, %1623), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1625 : Float() = aten::floor(%1624), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1626 : int = aten::Int(%1625), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1627 : int[] = prim::ListConstruct(%1609, %1626), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample]

%1628 : Float(1, 64, 8, 8) = aten::upsample_nearest2d(%input.72, %1627), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%1629 : Float(1, 64, 8, 8) = aten::mul(%1592, %1628), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1630 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%input.73 : Float(1, 64, 8, 8) = aten::add(%1589, %1629, %1630), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%1632 : int[] = prim::Constant[value=[1, 1]]()

%1633 : int[] = prim::Constant[value=[1, 1]]()

%1634 : int[] = prim::Constant[value=[1, 1]]()

%1635 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1636 : int[] = prim::Constant[value=[0, 0]]()

%1637 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1638 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1639 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1640 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.74 : Float(1, 64, 8, 8) = aten::_convolution(%input.73, %bifpn.0.conv6_up.conv.0.weight, %bifpn.0.conv6_up.conv.0.bias, %1632, %1633, %1634, %1635, %1636, %1637, %1638, %1639, %1640), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1642 : int[] = prim::Constant[value=[1, 1]]()

%1643 : int[] = prim::Constant[value=[0, 0]]()

%1644 : int[] = prim::Constant[value=[1, 1]]()

%1645 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1646 : int[] = prim::Constant[value=[0, 0]]()

%1647 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1648 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1649 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1650 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.75 : Float(1, 64, 8, 8) = aten::_convolution(%input.74, %bifpn.0.conv6_up.conv.1.weight, %bifpn.0.conv6_up.conv.1.bias, %1642, %1643, %1644, %1645, %1646, %1647, %1648, %1649, %1650), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1652 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1653 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1654 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1655 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.76 : Float(1, 64, 8, 8) = aten::batch_norm(%input.75, %bifpn.0.conv6_up.conv.2.weight, %bifpn.0.conv6_up.conv.2.bias, %bifpn.0.conv6_up.conv.2.running_mean, %bifpn.0.conv6_up.conv.2.running_var, %1652, %1653, %1654, %1655), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.78 : Float(1, 64, 8, 8) = aten::relu(%input.76), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1658 : Float(2) = aten::relu(%bifpn.0.p5_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p5_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1659 : int[] = prim::Constant[value=[0]]()

%1660 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1661 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1662 : Float() = aten::sum(%1658, %1659, %1660, %1661), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1663 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1664 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1665 : Float() = aten::add(%1662, %1663, %1664), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1666 : Float(2) = aten::div(%1658, %1665), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%1667 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1668 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1669 : Float() = aten::select(%1666, %1667, %1668), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1670 : Float(1, 64, 16, 16) = aten::mul(%1669, %1555), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1671 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1672 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1673 : Float() = aten::select(%1666, %1671, %1672), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1674 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1675 : int = aten::size(%input.78, %1674), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1676 : Long() = prim::NumToTensor(%1675), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1677 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1678 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1679 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1680 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1681 : Float() = aten::to(%1676, %1677, %1678, %1679, %1680), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1682 : Float() = prim::Constant[value={2}]()

%1683 : Float() = aten::mul(%1681, %1682), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1684 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1685 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1686 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1687 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1688 : Float() = aten::to(%1683, %1684, %1685, %1686, %1687), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1689 : Float() = aten::floor(%1688), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1690 : int = aten::Int(%1689), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1691 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1692 : int = aten::size(%input.78, %1691), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1693 : Long() = prim::NumToTensor(%1692), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1694 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1695 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1696 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1697 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1698 : Float() = aten::to(%1693, %1694, %1695, %1696, %1697), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1699 : Float() = prim::Constant[value={2}]()

%1700 : Float() = aten::mul(%1698, %1699), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1701 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1702 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1703 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1704 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1705 : Float() = aten::to(%1700, %1701, %1702, %1703, %1704), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1706 : Float() = aten::floor(%1705), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1707 : int = aten::Int(%1706), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1708 : int[] = prim::ListConstruct(%1690, %1707), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample]

%1709 : Float(1, 64, 16, 16) = aten::upsample_nearest2d(%input.78, %1708), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%1710 : Float(1, 64, 16, 16) = aten::mul(%1673, %1709), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1711 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%input.79 : Float(1, 64, 16, 16) = aten::add(%1670, %1710, %1711), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%1713 : int[] = prim::Constant[value=[1, 1]]()

%1714 : int[] = prim::Constant[value=[1, 1]]()

%1715 : int[] = prim::Constant[value=[1, 1]]()

%1716 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1717 : int[] = prim::Constant[value=[0, 0]]()

%1718 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1719 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1720 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1721 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.80 : Float(1, 64, 16, 16) = aten::_convolution(%input.79, %bifpn.0.conv5_up.conv.0.weight, %bifpn.0.conv5_up.conv.0.bias, %1713, %1714, %1715, %1716, %1717, %1718, %1719, %1720, %1721), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1723 : int[] = prim::Constant[value=[1, 1]]()

%1724 : int[] = prim::Constant[value=[0, 0]]()

%1725 : int[] = prim::Constant[value=[1, 1]]()

%1726 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1727 : int[] = prim::Constant[value=[0, 0]]()

%1728 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1729 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1730 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1731 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.81 : Float(1, 64, 16, 16) = aten::_convolution(%input.80, %bifpn.0.conv5_up.conv.1.weight, %bifpn.0.conv5_up.conv.1.bias, %1723, %1724, %1725, %1726, %1727, %1728, %1729, %1730, %1731), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1733 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1734 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1735 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1736 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.82 : Float(1, 64, 16, 16) = aten::batch_norm(%input.81, %bifpn.0.conv5_up.conv.2.weight, %bifpn.0.conv5_up.conv.2.bias, %bifpn.0.conv5_up.conv.2.running_mean, %bifpn.0.conv5_up.conv.2.running_var, %1733, %1734, %1735, %1736), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.84 : Float(1, 64, 16, 16) = aten::relu(%input.82), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1739 : Float(2) = aten::relu(%bifpn.0.p4_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p4_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1740 : int[] = prim::Constant[value=[0]]()

%1741 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1742 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1743 : Float() = aten::sum(%1739, %1740, %1741, %1742), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1744 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1745 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1746 : Float() = aten::add(%1743, %1744, %1745), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1747 : Float(2) = aten::div(%1739, %1746), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%1748 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1749 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1750 : Float() = aten::select(%1747, %1748, %1749), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1751 : Float(1, 64, 32, 32) = aten::mul(%1750, %1545), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1752 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1753 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1754 : Float() = aten::select(%1747, %1752, %1753), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1755 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1756 : int = aten::size(%input.84, %1755), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1757 : Long() = prim::NumToTensor(%1756), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1758 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1759 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1760 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1761 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1762 : Float() = aten::to(%1757, %1758, %1759, %1760, %1761), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1763 : Float() = prim::Constant[value={2}]()

%1764 : Float() = aten::mul(%1762, %1763), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1765 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1766 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1767 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1768 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1769 : Float() = aten::to(%1764, %1765, %1766, %1767, %1768), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1770 : Float() = aten::floor(%1769), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1771 : int = aten::Int(%1770), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1772 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1773 : int = aten::size(%input.84, %1772), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1774 : Long() = prim::NumToTensor(%1773), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1775 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1776 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1777 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1778 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1779 : Float() = aten::to(%1774, %1775, %1776, %1777, %1778), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1780 : Float() = prim::Constant[value={2}]()

%1781 : Float() = aten::mul(%1779, %1780), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1782 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1783 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1784 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1785 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1786 : Float() = aten::to(%1781, %1782, %1783, %1784, %1785), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1787 : Float() = aten::floor(%1786), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1788 : int = aten::Int(%1787), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1789 : int[] = prim::ListConstruct(%1771, %1788), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample]

%1790 : Float(1, 64, 32, 32) = aten::upsample_nearest2d(%input.84, %1789), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%1791 : Float(1, 64, 32, 32) = aten::mul(%1754, %1790), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1792 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%input.85 : Float(1, 64, 32, 32) = aten::add(%1751, %1791, %1792), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%1794 : int[] = prim::Constant[value=[1, 1]]()

%1795 : int[] = prim::Constant[value=[1, 1]]()

%1796 : int[] = prim::Constant[value=[1, 1]]()

%1797 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1798 : int[] = prim::Constant[value=[0, 0]]()

%1799 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1800 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1801 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1802 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.86 : Float(1, 64, 32, 32) = aten::_convolution(%input.85, %bifpn.0.conv4_up.conv.0.weight, %bifpn.0.conv4_up.conv.0.bias, %1794, %1795, %1796, %1797, %1798, %1799, %1800, %1801, %1802), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1804 : int[] = prim::Constant[value=[1, 1]]()

%1805 : int[] = prim::Constant[value=[0, 0]]()

%1806 : int[] = prim::Constant[value=[1, 1]]()

%1807 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1808 : int[] = prim::Constant[value=[0, 0]]()

%1809 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1810 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1811 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1812 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.87 : Float(1, 64, 32, 32) = aten::_convolution(%input.86, %bifpn.0.conv4_up.conv.1.weight, %bifpn.0.conv4_up.conv.1.bias, %1804, %1805, %1806, %1807, %1808, %1809, %1810, %1811, %1812), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1814 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1815 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1816 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1817 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.88 : Float(1, 64, 32, 32) = aten::batch_norm(%input.87, %bifpn.0.conv4_up.conv.2.weight, %bifpn.0.conv4_up.conv.2.bias, %bifpn.0.conv4_up.conv.2.running_mean, %bifpn.0.conv4_up.conv.2.running_var, %1814, %1815, %1816, %1817), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.90 : Float(1, 64, 32, 32) = aten::relu(%input.88), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1820 : Float(2) = aten::relu(%bifpn.0.p3_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p3_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1821 : int[] = prim::Constant[value=[0]]()

%1822 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1823 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1824 : Float() = aten::sum(%1820, %1821, %1822, %1823), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1825 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1826 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1827 : Float() = aten::add(%1824, %1825, %1826), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1828 : Float(2) = aten::div(%1820, %1827), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%1829 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1830 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1831 : Float() = aten::select(%1828, %1829, %1830), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1832 : Float(1, 64, 64, 64) = aten::mul(%1831, %1535), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1833 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1834 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1835 : Float() = aten::select(%1828, %1833, %1834), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1836 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1837 : int = aten::size(%input.90, %1836), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1838 : Long() = prim::NumToTensor(%1837), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1839 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1840 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1841 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1842 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1843 : Float() = aten::to(%1838, %1839, %1840, %1841, %1842), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1844 : Float() = prim::Constant[value={2}]()

%1845 : Float() = aten::mul(%1843, %1844), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1846 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1847 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1848 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1849 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1850 : Float() = aten::to(%1845, %1846, %1847, %1848, %1849), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1851 : Float() = aten::floor(%1850), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1852 : int = aten::Int(%1851), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1853 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1854 : int = aten::size(%input.90, %1853), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1855 : Long() = prim::NumToTensor(%1854), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1856 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1857 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1858 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1859 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1860 : Float() = aten::to(%1855, %1856, %1857, %1858, %1859), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1861 : Float() = prim::Constant[value={2}]()

%1862 : Float() = aten::mul(%1860, %1861), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1863 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1864 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1865 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1866 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1867 : Float() = aten::to(%1862, %1863, %1864, %1865, %1866), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1868 : Float() = aten::floor(%1867), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%1869 : int = aten::Int(%1868), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1870 : int[] = prim::ListConstruct(%1852, %1869), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample]

%1871 : Float(1, 64, 64, 64) = aten::upsample_nearest2d(%input.90, %1870), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%1872 : Float(1, 64, 64, 64) = aten::mul(%1835, %1871), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1873 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%input.91 : Float(1, 64, 64, 64) = aten::add(%1832, %1872, %1873), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%1875 : int[] = prim::Constant[value=[1, 1]]()

%1876 : int[] = prim::Constant[value=[1, 1]]()

%1877 : int[] = prim::Constant[value=[1, 1]]()

%1878 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1879 : int[] = prim::Constant[value=[0, 0]]()

%1880 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1881 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1882 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1883 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.92 : Float(1, 64, 64, 64) = aten::_convolution(%input.91, %bifpn.0.conv3_up.conv.0.weight, %bifpn.0.conv3_up.conv.0.bias, %1875, %1876, %1877, %1878, %1879, %1880, %1881, %1882, %1883), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1885 : int[] = prim::Constant[value=[1, 1]]()

%1886 : int[] = prim::Constant[value=[0, 0]]()

%1887 : int[] = prim::Constant[value=[1, 1]]()

%1888 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1889 : int[] = prim::Constant[value=[0, 0]]()

%1890 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1891 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1892 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1893 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.93 : Float(1, 64, 64, 64) = aten::_convolution(%input.92, %bifpn.0.conv3_up.conv.1.weight, %bifpn.0.conv3_up.conv.1.bias, %1885, %1886, %1887, %1888, %1889, %1890, %1891, %1892, %1893), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1895 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1896 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1897 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1898 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.94 : Float(1, 64, 64, 64) = aten::batch_norm(%input.93, %bifpn.0.conv3_up.conv.2.weight, %bifpn.0.conv3_up.conv.2.bias, %bifpn.0.conv3_up.conv.2.running_mean, %bifpn.0.conv3_up.conv.2.running_var, %1895, %1896, %1897, %1898), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1900 : Float(1, 64, 64, 64) = aten::relu(%input.94), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv3_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1901 : Float(3) = aten::relu(%bifpn.0.p4_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p4_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1902 : int[] = prim::Constant[value=[0]]()

%1903 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1904 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1905 : Float() = aten::sum(%1901, %1902, %1903, %1904), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1906 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1907 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1908 : Float() = aten::add(%1905, %1906, %1907), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1909 : Float(3) = aten::div(%1901, %1908), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%1910 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1911 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1912 : Float() = aten::select(%1909, %1910, %1911), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1913 : Float(1, 64, 32, 32) = aten::mul(%1912, %1545), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1914 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1915 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1916 : Float() = aten::select(%1909, %1914, %1915), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1917 : Float(1, 64, 32, 32) = aten::mul(%1916, %input.90), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1918 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1919 : Float(1, 64, 32, 32) = aten::add(%1913, %1917, %1918), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1920 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1921 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1922 : Float() = aten::select(%1909, %1920, %1921), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1923 : int[] = prim::Constant[value=[2, 2]]()

%1924 : int[] = prim::Constant[value=[2, 2]]()

%1925 : int[] = prim::Constant[value=[0, 0]]()

%1926 : int[] = prim::Constant[value=[1, 1]]()

%1927 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p4_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%1928 : Float(1, 64, 32, 32) = aten::max_pool2d(%1900, %1923, %1924, %1925, %1926, %1927), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p4_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%1929 : Float(1, 64, 32, 32) = aten::mul(%1922, %1928), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1930 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%input.96 : Float(1, 64, 32, 32) = aten::add(%1919, %1929, %1930), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%1932 : int[] = prim::Constant[value=[1, 1]]()

%1933 : int[] = prim::Constant[value=[1, 1]]()

%1934 : int[] = prim::Constant[value=[1, 1]]()

%1935 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1936 : int[] = prim::Constant[value=[0, 0]]()

%1937 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1938 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1939 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1940 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.97 : Float(1, 64, 32, 32) = aten::_convolution(%input.96, %bifpn.0.conv4_down.conv.0.weight, %bifpn.0.conv4_down.conv.0.bias, %1932, %1933, %1934, %1935, %1936, %1937, %1938, %1939, %1940), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1942 : int[] = prim::Constant[value=[1, 1]]()

%1943 : int[] = prim::Constant[value=[0, 0]]()

%1944 : int[] = prim::Constant[value=[1, 1]]()

%1945 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1946 : int[] = prim::Constant[value=[0, 0]]()

%1947 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1948 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1949 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1950 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.98 : Float(1, 64, 32, 32) = aten::_convolution(%input.97, %bifpn.0.conv4_down.conv.1.weight, %bifpn.0.conv4_down.conv.1.bias, %1942, %1943, %1944, %1945, %1946, %1947, %1948, %1949, %1950), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1952 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1953 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1954 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1955 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.99 : Float(1, 64, 32, 32) = aten::batch_norm(%input.98, %bifpn.0.conv4_down.conv.2.weight, %bifpn.0.conv4_down.conv.2.bias, %bifpn.0.conv4_down.conv.2.running_mean, %bifpn.0.conv4_down.conv.2.running_var, %1952, %1953, %1954, %1955), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%1957 : Float(1, 64, 32, 32) = aten::relu(%input.99), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv4_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1958 : Float(3) = aten::relu(%bifpn.0.p5_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p5_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%1959 : int[] = prim::Constant[value=[0]]()

%1960 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1961 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%1962 : Float() = aten::sum(%1958, %1959, %1960, %1961), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1963 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1964 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1965 : Float() = aten::add(%1962, %1963, %1964), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1966 : Float(3) = aten::div(%1958, %1965), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%1967 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1968 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1969 : Float() = aten::select(%1966, %1967, %1968), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1970 : Float(1, 64, 16, 16) = aten::mul(%1969, %1555), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1971 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1972 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1973 : Float() = aten::select(%1966, %1971, %1972), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1974 : Float(1, 64, 16, 16) = aten::mul(%1973, %input.84), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1975 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1976 : Float(1, 64, 16, 16) = aten::add(%1970, %1974, %1975), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1977 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1978 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1979 : Float() = aten::select(%1966, %1977, %1978), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1980 : int[] = prim::Constant[value=[2, 2]]()

%1981 : int[] = prim::Constant[value=[2, 2]]()

%1982 : int[] = prim::Constant[value=[0, 0]]()

%1983 : int[] = prim::Constant[value=[1, 1]]()

%1984 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p5_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%1985 : Float(1, 64, 16, 16) = aten::max_pool2d(%1957, %1980, %1981, %1982, %1983, %1984), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p5_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%1986 : Float(1, 64, 16, 16) = aten::mul(%1979, %1985), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1987 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%input.101 : Float(1, 64, 16, 16) = aten::add(%1976, %1986, %1987), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%1989 : int[] = prim::Constant[value=[1, 1]]()

%1990 : int[] = prim::Constant[value=[1, 1]]()

%1991 : int[] = prim::Constant[value=[1, 1]]()

%1992 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1993 : int[] = prim::Constant[value=[0, 0]]()

%1994 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1995 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1996 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1997 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.102 : Float(1, 64, 16, 16) = aten::_convolution(%input.101, %bifpn.0.conv5_down.conv.0.weight, %bifpn.0.conv5_down.conv.0.bias, %1989, %1990, %1991, %1992, %1993, %1994, %1995, %1996, %1997), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%1999 : int[] = prim::Constant[value=[1, 1]]()

%2000 : int[] = prim::Constant[value=[0, 0]]()

%2001 : int[] = prim::Constant[value=[1, 1]]()

%2002 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2003 : int[] = prim::Constant[value=[0, 0]]()

%2004 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2005 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2006 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2007 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.103 : Float(1, 64, 16, 16) = aten::_convolution(%input.102, %bifpn.0.conv5_down.conv.1.weight, %bifpn.0.conv5_down.conv.1.bias, %1999, %2000, %2001, %2002, %2003, %2004, %2005, %2006, %2007), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2009 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2010 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2011 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2012 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.104 : Float(1, 64, 16, 16) = aten::batch_norm(%input.103, %bifpn.0.conv5_down.conv.2.weight, %bifpn.0.conv5_down.conv.2.bias, %bifpn.0.conv5_down.conv.2.running_mean, %bifpn.0.conv5_down.conv.2.running_var, %2009, %2010, %2011, %2012), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2014 : Float(1, 64, 16, 16) = aten::relu(%input.104), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv5_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2015 : Float(3) = aten::relu(%bifpn.0.p6_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p6_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2016 : int[] = prim::Constant[value=[0]]()

%2017 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2018 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%2019 : Float() = aten::sum(%2015, %2016, %2017, %2018), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2020 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2021 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2022 : Float() = aten::add(%2019, %2020, %2021), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2023 : Float(3) = aten::div(%2015, %2022), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2024 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2025 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2026 : Float() = aten::select(%2023, %2024, %2025), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2027 : Float(1, 64, 8, 8) = aten::mul(%2026, %input.69), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2028 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2029 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2030 : Float() = aten::select(%2023, %2028, %2029), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2031 : Float(1, 64, 8, 8) = aten::mul(%2030, %input.78), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2032 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2033 : Float(1, 64, 8, 8) = aten::add(%2027, %2031, %2032), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2034 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2035 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2036 : Float() = aten::select(%2023, %2034, %2035), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2037 : int[] = prim::Constant[value=[2, 2]]()

%2038 : int[] = prim::Constant[value=[2, 2]]()

%2039 : int[] = prim::Constant[value=[0, 0]]()

%2040 : int[] = prim::Constant[value=[1, 1]]()

%2041 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p6_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2042 : Float(1, 64, 8, 8) = aten::max_pool2d(%2014, %2037, %2038, %2039, %2040, %2041), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p6_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2043 : Float(1, 64, 8, 8) = aten::mul(%2036, %2042), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2044 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%input.106 : Float(1, 64, 8, 8) = aten::add(%2033, %2043, %2044), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2046 : int[] = prim::Constant[value=[1, 1]]()

%2047 : int[] = prim::Constant[value=[1, 1]]()

%2048 : int[] = prim::Constant[value=[1, 1]]()

%2049 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2050 : int[] = prim::Constant[value=[0, 0]]()

%2051 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2052 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2053 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2054 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.107 : Float(1, 64, 8, 8) = aten::_convolution(%input.106, %bifpn.0.conv6_down.conv.0.weight, %bifpn.0.conv6_down.conv.0.bias, %2046, %2047, %2048, %2049, %2050, %2051, %2052, %2053, %2054), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2056 : int[] = prim::Constant[value=[1, 1]]()

%2057 : int[] = prim::Constant[value=[0, 0]]()

%2058 : int[] = prim::Constant[value=[1, 1]]()

%2059 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2060 : int[] = prim::Constant[value=[0, 0]]()

%2061 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2062 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2063 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2064 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.108 : Float(1, 64, 8, 8) = aten::_convolution(%input.107, %bifpn.0.conv6_down.conv.1.weight, %bifpn.0.conv6_down.conv.1.bias, %2056, %2057, %2058, %2059, %2060, %2061, %2062, %2063, %2064), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2066 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2067 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2068 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2069 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.109 : Float(1, 64, 8, 8) = aten::batch_norm(%input.108, %bifpn.0.conv6_down.conv.2.weight, %bifpn.0.conv6_down.conv.2.bias, %bifpn.0.conv6_down.conv.2.running_mean, %bifpn.0.conv6_down.conv.2.running_var, %2066, %2067, %2068, %2069), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2071 : Float(1, 64, 8, 8) = aten::relu(%input.109), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv6_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2072 : Float(2) = aten::relu(%bifpn.0.p7_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ReLU[p7_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2073 : int[] = prim::Constant[value=[0]]()

%2074 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2075 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]

%2076 : Float() = aten::sum(%2072, %2073, %2074, %2075), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2077 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2078 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2079 : Float() = aten::add(%2076, %2077, %2078), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2080 : Float(2) = aten::div(%2072, %2079), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2081 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2082 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2083 : Float() = aten::select(%2080, %2081, %2082), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2084 : Float(1, 64, 4, 4) = aten::mul(%2083, %input.72), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2085 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2086 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2087 : Float() = aten::select(%2080, %2085, %2086), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2088 : int[] = prim::Constant[value=[2, 2]]()

%2089 : int[] = prim::Constant[value=[2, 2]]()

%2090 : int[] = prim::Constant[value=[0, 0]]()

%2091 : int[] = prim::Constant[value=[1, 1]]()

%2092 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p7_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2093 : Float(1, 64, 4, 4) = aten::max_pool2d(%2071, %2088, %2089, %2090, %2091, %2092), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/MaxPool2d[p7_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2094 : Float(1, 64, 4, 4) = aten::mul(%2087, %2093), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2095 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%input.111 : Float(1, 64, 4, 4) = aten::add(%2084, %2094, %2095), scope: EfficientDet/Sequential[bifpn]/BiFPN[0] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2097 : int[] = prim::Constant[value=[1, 1]]()

%2098 : int[] = prim::Constant[value=[1, 1]]()

%2099 : int[] = prim::Constant[value=[1, 1]]()

%2100 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2101 : int[] = prim::Constant[value=[0, 0]]()

%2102 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2103 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2104 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2105 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.112 : Float(1, 64, 4, 4) = aten::_convolution(%input.111, %bifpn.0.conv7_down.conv.0.weight, %bifpn.0.conv7_down.conv.0.bias, %2097, %2098, %2099, %2100, %2101, %2102, %2103, %2104, %2105), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2107 : int[] = prim::Constant[value=[1, 1]]()

%2108 : int[] = prim::Constant[value=[0, 0]]()

%2109 : int[] = prim::Constant[value=[1, 1]]()

%2110 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2111 : int[] = prim::Constant[value=[0, 0]]()

%2112 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2113 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2114 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2115 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.113 : Float(1, 64, 4, 4) = aten::_convolution(%input.112, %bifpn.0.conv7_down.conv.1.weight, %bifpn.0.conv7_down.conv.1.bias, %2107, %2108, %2109, %2110, %2111, %2112, %2113, %2114, %2115), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2117 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2118 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2119 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2120 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.114 : Float(1, 64, 4, 4) = aten::batch_norm(%input.113, %bifpn.0.conv7_down.conv.2.weight, %bifpn.0.conv7_down.conv.2.bias, %bifpn.0.conv7_down.conv.2.running_mean, %bifpn.0.conv7_down.conv.2.running_var, %2117, %2118, %2119, %2120), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.116 : Float(1, 64, 4, 4) = aten::relu(%input.114), scope: EfficientDet/Sequential[bifpn]/BiFPN[0]/ConvBlock[conv7_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2123 : Float(2) = aten::relu(%bifpn.1.p6_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p6_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2124 : int[] = prim::Constant[value=[0]]()

%2125 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2126 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2127 : Float() = aten::sum(%2123, %2124, %2125, %2126), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2128 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2129 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2130 : Float() = aten::add(%2127, %2128, %2129), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2131 : Float(2) = aten::div(%2123, %2130), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:89:0

%2132 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2133 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2134 : Float() = aten::select(%2131, %2132, %2133), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2135 : Float(1, 64, 8, 8) = aten::mul(%2134, %2071), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2136 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2137 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2138 : Float() = aten::select(%2131, %2136, %2137), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2139 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2140 : int = aten::size(%input.116, %2139), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2141 : Long() = prim::NumToTensor(%2140), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2142 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2143 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2144 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2145 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2146 : Float() = aten::to(%2141, %2142, %2143, %2144, %2145), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2147 : Float() = prim::Constant[value={2}]()

%2148 : Float() = aten::mul(%2146, %2147), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2149 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2150 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2151 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2152 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2153 : Float() = aten::to(%2148, %2149, %2150, %2151, %2152), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2154 : Float() = aten::floor(%2153), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2155 : int = aten::Int(%2154), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2156 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2157 : int = aten::size(%input.116, %2156), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2158 : Long() = prim::NumToTensor(%2157), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2159 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2160 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2161 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2162 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2163 : Float() = aten::to(%2158, %2159, %2160, %2161, %2162), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2164 : Float() = prim::Constant[value={2}]()

%2165 : Float() = aten::mul(%2163, %2164), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2166 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2167 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2168 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2169 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2170 : Float() = aten::to(%2165, %2166, %2167, %2168, %2169), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2171 : Float() = aten::floor(%2170), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2172 : int = aten::Int(%2171), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2173 : int[] = prim::ListConstruct(%2155, %2172), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample]

%2174 : Float(1, 64, 8, 8) = aten::upsample_nearest2d(%input.116, %2173), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p6_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%2175 : Float(1, 64, 8, 8) = aten::mul(%2138, %2174), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2176 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%input.117 : Float(1, 64, 8, 8) = aten::add(%2135, %2175, %2176), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:91:0

%2178 : int[] = prim::Constant[value=[1, 1]]()

%2179 : int[] = prim::Constant[value=[1, 1]]()

%2180 : int[] = prim::Constant[value=[1, 1]]()

%2181 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2182 : int[] = prim::Constant[value=[0, 0]]()

%2183 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2184 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2185 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2186 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.118 : Float(1, 64, 8, 8) = aten::_convolution(%input.117, %bifpn.1.conv6_up.conv.0.weight, %bifpn.1.conv6_up.conv.0.bias, %2178, %2179, %2180, %2181, %2182, %2183, %2184, %2185, %2186), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2188 : int[] = prim::Constant[value=[1, 1]]()

%2189 : int[] = prim::Constant[value=[0, 0]]()

%2190 : int[] = prim::Constant[value=[1, 1]]()

%2191 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2192 : int[] = prim::Constant[value=[0, 0]]()

%2193 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2194 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2195 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2196 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.119 : Float(1, 64, 8, 8) = aten::_convolution(%input.118, %bifpn.1.conv6_up.conv.1.weight, %bifpn.1.conv6_up.conv.1.bias, %2188, %2189, %2190, %2191, %2192, %2193, %2194, %2195, %2196), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2198 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2199 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2200 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2201 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.120 : Float(1, 64, 8, 8) = aten::batch_norm(%input.119, %bifpn.1.conv6_up.conv.2.weight, %bifpn.1.conv6_up.conv.2.bias, %bifpn.1.conv6_up.conv.2.running_mean, %bifpn.1.conv6_up.conv.2.running_var, %2198, %2199, %2200, %2201), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.122 : Float(1, 64, 8, 8) = aten::relu(%input.120), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2204 : Float(2) = aten::relu(%bifpn.1.p5_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p5_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2205 : int[] = prim::Constant[value=[0]]()

%2206 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2207 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2208 : Float() = aten::sum(%2204, %2205, %2206, %2207), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2209 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2210 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2211 : Float() = aten::add(%2208, %2209, %2210), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2212 : Float(2) = aten::div(%2204, %2211), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:94:0

%2213 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2214 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2215 : Float() = aten::select(%2212, %2213, %2214), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2216 : Float(1, 64, 16, 16) = aten::mul(%2215, %2014), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2217 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2218 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2219 : Float() = aten::select(%2212, %2217, %2218), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2220 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2221 : int = aten::size(%input.122, %2220), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2222 : Long() = prim::NumToTensor(%2221), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2223 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2224 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2225 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2226 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2227 : Float() = aten::to(%2222, %2223, %2224, %2225, %2226), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2228 : Float() = prim::Constant[value={2}]()

%2229 : Float() = aten::mul(%2227, %2228), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2230 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2231 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2232 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2233 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2234 : Float() = aten::to(%2229, %2230, %2231, %2232, %2233), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2235 : Float() = aten::floor(%2234), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2236 : int = aten::Int(%2235), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2237 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2238 : int = aten::size(%input.122, %2237), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2239 : Long() = prim::NumToTensor(%2238), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2240 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2241 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2242 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2243 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2244 : Float() = aten::to(%2239, %2240, %2241, %2242, %2243), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2245 : Float() = prim::Constant[value={2}]()

%2246 : Float() = aten::mul(%2244, %2245), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2247 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2248 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2249 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2250 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2251 : Float() = aten::to(%2246, %2247, %2248, %2249, %2250), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2252 : Float() = aten::floor(%2251), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2253 : int = aten::Int(%2252), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2254 : int[] = prim::ListConstruct(%2236, %2253), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample]

%2255 : Float(1, 64, 16, 16) = aten::upsample_nearest2d(%input.122, %2254), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p5_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%2256 : Float(1, 64, 16, 16) = aten::mul(%2219, %2255), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2257 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%input.123 : Float(1, 64, 16, 16) = aten::add(%2216, %2256, %2257), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:96:0

%2259 : int[] = prim::Constant[value=[1, 1]]()

%2260 : int[] = prim::Constant[value=[1, 1]]()

%2261 : int[] = prim::Constant[value=[1, 1]]()

%2262 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2263 : int[] = prim::Constant[value=[0, 0]]()

%2264 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2265 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2266 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2267 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.124 : Float(1, 64, 16, 16) = aten::_convolution(%input.123, %bifpn.1.conv5_up.conv.0.weight, %bifpn.1.conv5_up.conv.0.bias, %2259, %2260, %2261, %2262, %2263, %2264, %2265, %2266, %2267), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2269 : int[] = prim::Constant[value=[1, 1]]()

%2270 : int[] = prim::Constant[value=[0, 0]]()

%2271 : int[] = prim::Constant[value=[1, 1]]()

%2272 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2273 : int[] = prim::Constant[value=[0, 0]]()

%2274 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2275 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2276 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2277 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.125 : Float(1, 64, 16, 16) = aten::_convolution(%input.124, %bifpn.1.conv5_up.conv.1.weight, %bifpn.1.conv5_up.conv.1.bias, %2269, %2270, %2271, %2272, %2273, %2274, %2275, %2276, %2277), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2279 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2280 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2281 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2282 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.126 : Float(1, 64, 16, 16) = aten::batch_norm(%input.125, %bifpn.1.conv5_up.conv.2.weight, %bifpn.1.conv5_up.conv.2.bias, %bifpn.1.conv5_up.conv.2.running_mean, %bifpn.1.conv5_up.conv.2.running_var, %2279, %2280, %2281, %2282), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.128 : Float(1, 64, 16, 16) = aten::relu(%input.126), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2285 : Float(2) = aten::relu(%bifpn.1.p4_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p4_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2286 : int[] = prim::Constant[value=[0]]()

%2287 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2288 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2289 : Float() = aten::sum(%2285, %2286, %2287, %2288), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2290 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2291 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2292 : Float() = aten::add(%2289, %2290, %2291), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2293 : Float(2) = aten::div(%2285, %2292), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:99:0

%2294 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2295 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2296 : Float() = aten::select(%2293, %2294, %2295), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2297 : Float(1, 64, 32, 32) = aten::mul(%2296, %1957), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2298 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2299 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2300 : Float() = aten::select(%2293, %2298, %2299), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2301 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2302 : int = aten::size(%input.128, %2301), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2303 : Long() = prim::NumToTensor(%2302), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2304 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2305 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2306 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2307 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2308 : Float() = aten::to(%2303, %2304, %2305, %2306, %2307), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2309 : Float() = prim::Constant[value={2}]()

%2310 : Float() = aten::mul(%2308, %2309), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2311 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2312 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2313 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2314 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2315 : Float() = aten::to(%2310, %2311, %2312, %2313, %2314), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2316 : Float() = aten::floor(%2315), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2317 : int = aten::Int(%2316), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2318 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2319 : int = aten::size(%input.128, %2318), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2320 : Long() = prim::NumToTensor(%2319), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2321 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2322 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2323 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2324 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2325 : Float() = aten::to(%2320, %2321, %2322, %2323, %2324), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2326 : Float() = prim::Constant[value={2}]()

%2327 : Float() = aten::mul(%2325, %2326), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2328 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2329 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2330 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2331 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2332 : Float() = aten::to(%2327, %2328, %2329, %2330, %2331), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2333 : Float() = aten::floor(%2332), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2334 : int = aten::Int(%2333), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2335 : int[] = prim::ListConstruct(%2317, %2334), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample]

%2336 : Float(1, 64, 32, 32) = aten::upsample_nearest2d(%input.128, %2335), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p4_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%2337 : Float(1, 64, 32, 32) = aten::mul(%2300, %2336), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2338 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%input.129 : Float(1, 64, 32, 32) = aten::add(%2297, %2337, %2338), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:101:0

%2340 : int[] = prim::Constant[value=[1, 1]]()

%2341 : int[] = prim::Constant[value=[1, 1]]()

%2342 : int[] = prim::Constant[value=[1, 1]]()

%2343 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2344 : int[] = prim::Constant[value=[0, 0]]()

%2345 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2346 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2347 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2348 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.130 : Float(1, 64, 32, 32) = aten::_convolution(%input.129, %bifpn.1.conv4_up.conv.0.weight, %bifpn.1.conv4_up.conv.0.bias, %2340, %2341, %2342, %2343, %2344, %2345, %2346, %2347, %2348), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2350 : int[] = prim::Constant[value=[1, 1]]()

%2351 : int[] = prim::Constant[value=[0, 0]]()

%2352 : int[] = prim::Constant[value=[1, 1]]()

%2353 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2354 : int[] = prim::Constant[value=[0, 0]]()

%2355 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2356 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2357 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2358 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.131 : Float(1, 64, 32, 32) = aten::_convolution(%input.130, %bifpn.1.conv4_up.conv.1.weight, %bifpn.1.conv4_up.conv.1.bias, %2350, %2351, %2352, %2353, %2354, %2355, %2356, %2357, %2358), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2360 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2361 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2362 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2363 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.132 : Float(1, 64, 32, 32) = aten::batch_norm(%input.131, %bifpn.1.conv4_up.conv.2.weight, %bifpn.1.conv4_up.conv.2.bias, %bifpn.1.conv4_up.conv.2.running_mean, %bifpn.1.conv4_up.conv.2.running_var, %2360, %2361, %2362, %2363), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.134 : Float(1, 64, 32, 32) = aten::relu(%input.132), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2366 : Float(2) = aten::relu(%bifpn.1.p3_w1), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p3_w1_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2367 : int[] = prim::Constant[value=[0]]()

%2368 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2369 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2370 : Float() = aten::sum(%2366, %2367, %2368, %2369), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2371 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2372 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2373 : Float() = aten::add(%2370, %2371, %2372), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2374 : Float(2) = aten::div(%2366, %2373), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:105:0

%2375 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2376 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2377 : Float() = aten::select(%2374, %2375, %2376), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2378 : Float(1, 64, 64, 64) = aten::mul(%2377, %1900), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2379 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2380 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2381 : Float() = aten::select(%2374, %2379, %2380), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2382 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2383 : int = aten::size(%input.134, %2382), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2384 : Long() = prim::NumToTensor(%2383), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2385 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2386 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2387 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2388 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2389 : Float() = aten::to(%2384, %2385, %2386, %2387, %2388), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2390 : Float() = prim::Constant[value={2}]()

%2391 : Float() = aten::mul(%2389, %2390), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2392 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2393 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2394 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2395 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2396 : Float() = aten::to(%2391, %2392, %2393, %2394, %2395), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2397 : Float() = aten::floor(%2396), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2398 : int = aten::Int(%2397), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2399 : int = prim::Constant[value=3](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2400 : int = aten::size(%input.134, %2399), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2401 : Long() = prim::NumToTensor(%2400), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2402 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2403 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2404 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2405 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2406 : Float() = aten::to(%2401, %2402, %2403, %2404, %2405), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2407 : Float() = prim::Constant[value={2}]()

%2408 : Float() = aten::mul(%2406, %2407), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2409 : int = prim::Constant[value=6](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2410 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2411 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2412 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2413 : Float() = aten::to(%2408, %2409, %2410, %2411, %2412), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2414 : Float() = aten::floor(%2413), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2493:0

%2415 : int = aten::Int(%2414), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2416 : int[] = prim::ListConstruct(%2398, %2415), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample]

%2417 : Float(1, 64, 64, 64) = aten::upsample_nearest2d(%input.134, %2416), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/Upsample[p3_upsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:2512:0

%2418 : Float(1, 64, 64, 64) = aten::mul(%2381, %2417), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2419 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%input.135 : Float(1, 64, 64, 64) = aten::add(%2378, %2418, %2419), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:107:0

%2421 : int[] = prim::Constant[value=[1, 1]]()

%2422 : int[] = prim::Constant[value=[1, 1]]()

%2423 : int[] = prim::Constant[value=[1, 1]]()

%2424 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2425 : int[] = prim::Constant[value=[0, 0]]()

%2426 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2427 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2428 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2429 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.136 : Float(1, 64, 64, 64) = aten::_convolution(%input.135, %bifpn.1.conv3_up.conv.0.weight, %bifpn.1.conv3_up.conv.0.bias, %2421, %2422, %2423, %2424, %2425, %2426, %2427, %2428, %2429), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2431 : int[] = prim::Constant[value=[1, 1]]()

%2432 : int[] = prim::Constant[value=[0, 0]]()

%2433 : int[] = prim::Constant[value=[1, 1]]()

%2434 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2435 : int[] = prim::Constant[value=[0, 0]]()

%2436 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2437 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2438 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2439 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.137 : Float(1, 64, 64, 64) = aten::_convolution(%input.136, %bifpn.1.conv3_up.conv.1.weight, %bifpn.1.conv3_up.conv.1.bias, %2431, %2432, %2433, %2434, %2435, %2436, %2437, %2438, %2439), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2441 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2442 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2443 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2444 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.138 : Float(1, 64, 64, 64) = aten::batch_norm(%input.137, %bifpn.1.conv3_up.conv.2.weight, %bifpn.1.conv3_up.conv.2.bias, %bifpn.1.conv3_up.conv.2.running_mean, %bifpn.1.conv3_up.conv.2.running_var, %2441, %2442, %2443, %2444), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.159 : Float(1, 64, 64, 64) = aten::relu(%input.138), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv3_up]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2447 : Float(3) = aten::relu(%bifpn.1.p4_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p4_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2448 : int[] = prim::Constant[value=[0]]()

%2449 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2450 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2451 : Float() = aten::sum(%2447, %2448, %2449, %2450), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2452 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2453 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2454 : Float() = aten::add(%2451, %2452, %2453), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2455 : Float(3) = aten::div(%2447, %2454), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:111:0

%2456 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2457 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2458 : Float() = aten::select(%2455, %2456, %2457), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2459 : Float(1, 64, 32, 32) = aten::mul(%2458, %1957), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2460 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2461 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2462 : Float() = aten::select(%2455, %2460, %2461), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2463 : Float(1, 64, 32, 32) = aten::mul(%2462, %input.134), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2464 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2465 : Float(1, 64, 32, 32) = aten::add(%2459, %2463, %2464), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2466 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2467 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2468 : Float() = aten::select(%2455, %2466, %2467), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2469 : int[] = prim::Constant[value=[2, 2]]()

%2470 : int[] = prim::Constant[value=[2, 2]]()

%2471 : int[] = prim::Constant[value=[0, 0]]()

%2472 : int[] = prim::Constant[value=[1, 1]]()

%2473 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p4_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2474 : Float(1, 64, 32, 32) = aten::max_pool2d(%input.159, %2469, %2470, %2471, %2472, %2473), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p4_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2475 : Float(1, 64, 32, 32) = aten::mul(%2468, %2474), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2476 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%input.140 : Float(1, 64, 32, 32) = aten::add(%2465, %2475, %2476), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:114:0

%2478 : int[] = prim::Constant[value=[1, 1]]()

%2479 : int[] = prim::Constant[value=[1, 1]]()

%2480 : int[] = prim::Constant[value=[1, 1]]()

%2481 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2482 : int[] = prim::Constant[value=[0, 0]]()

%2483 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2484 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2485 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2486 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.141 : Float(1, 64, 32, 32) = aten::_convolution(%input.140, %bifpn.1.conv4_down.conv.0.weight, %bifpn.1.conv4_down.conv.0.bias, %2478, %2479, %2480, %2481, %2482, %2483, %2484, %2485, %2486), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2488 : int[] = prim::Constant[value=[1, 1]]()

%2489 : int[] = prim::Constant[value=[0, 0]]()

%2490 : int[] = prim::Constant[value=[1, 1]]()

%2491 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2492 : int[] = prim::Constant[value=[0, 0]]()

%2493 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2494 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2495 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2496 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.142 : Float(1, 64, 32, 32) = aten::_convolution(%input.141, %bifpn.1.conv4_down.conv.1.weight, %bifpn.1.conv4_down.conv.1.bias, %2488, %2489, %2490, %2491, %2492, %2493, %2494, %2495, %2496), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2498 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2499 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2500 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2501 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.143 : Float(1, 64, 32, 32) = aten::batch_norm(%input.142, %bifpn.1.conv4_down.conv.2.weight, %bifpn.1.conv4_down.conv.2.bias, %bifpn.1.conv4_down.conv.2.running_mean, %bifpn.1.conv4_down.conv.2.running_var, %2498, %2499, %2500, %2501), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.166 : Float(1, 64, 32, 32) = aten::relu(%input.143), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv4_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2504 : Float(3) = aten::relu(%bifpn.1.p5_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p5_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2505 : int[] = prim::Constant[value=[0]]()

%2506 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2507 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2508 : Float() = aten::sum(%2504, %2505, %2506, %2507), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2509 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2510 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2511 : Float() = aten::add(%2508, %2509, %2510), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2512 : Float(3) = aten::div(%2504, %2511), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:117:0

%2513 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2514 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2515 : Float() = aten::select(%2512, %2513, %2514), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2516 : Float(1, 64, 16, 16) = aten::mul(%2515, %2014), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2517 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2518 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2519 : Float() = aten::select(%2512, %2517, %2518), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2520 : Float(1, 64, 16, 16) = aten::mul(%2519, %input.128), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2521 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2522 : Float(1, 64, 16, 16) = aten::add(%2516, %2520, %2521), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2523 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2524 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2525 : Float() = aten::select(%2512, %2523, %2524), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2526 : int[] = prim::Constant[value=[2, 2]]()

%2527 : int[] = prim::Constant[value=[2, 2]]()

%2528 : int[] = prim::Constant[value=[0, 0]]()

%2529 : int[] = prim::Constant[value=[1, 1]]()

%2530 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p5_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2531 : Float(1, 64, 16, 16) = aten::max_pool2d(%input.166, %2526, %2527, %2528, %2529, %2530), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p5_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2532 : Float(1, 64, 16, 16) = aten::mul(%2525, %2531), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2533 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%input.145 : Float(1, 64, 16, 16) = aten::add(%2522, %2532, %2533), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:120:0

%2535 : int[] = prim::Constant[value=[1, 1]]()

%2536 : int[] = prim::Constant[value=[1, 1]]()

%2537 : int[] = prim::Constant[value=[1, 1]]()

%2538 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2539 : int[] = prim::Constant[value=[0, 0]]()

%2540 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2541 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2542 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2543 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.146 : Float(1, 64, 16, 16) = aten::_convolution(%input.145, %bifpn.1.conv5_down.conv.0.weight, %bifpn.1.conv5_down.conv.0.bias, %2535, %2536, %2537, %2538, %2539, %2540, %2541, %2542, %2543), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2545 : int[] = prim::Constant[value=[1, 1]]()

%2546 : int[] = prim::Constant[value=[0, 0]]()

%2547 : int[] = prim::Constant[value=[1, 1]]()

%2548 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2549 : int[] = prim::Constant[value=[0, 0]]()

%2550 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2551 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2552 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2553 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.147 : Float(1, 64, 16, 16) = aten::_convolution(%input.146, %bifpn.1.conv5_down.conv.1.weight, %bifpn.1.conv5_down.conv.1.bias, %2545, %2546, %2547, %2548, %2549, %2550, %2551, %2552, %2553), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2555 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2556 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2557 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2558 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.148 : Float(1, 64, 16, 16) = aten::batch_norm(%input.147, %bifpn.1.conv5_down.conv.2.weight, %bifpn.1.conv5_down.conv.2.bias, %bifpn.1.conv5_down.conv.2.running_mean, %bifpn.1.conv5_down.conv.2.running_var, %2555, %2556, %2557, %2558), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.173 : Float(1, 64, 16, 16) = aten::relu(%input.148), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv5_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2561 : Float(3) = aten::relu(%bifpn.1.p6_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p6_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2562 : int[] = prim::Constant[value=[0]]()

%2563 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2564 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2565 : Float() = aten::sum(%2561, %2562, %2563, %2564), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2566 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2567 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2568 : Float() = aten::add(%2565, %2566, %2567), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2569 : Float(3) = aten::div(%2561, %2568), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:123:0

%2570 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2571 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2572 : Float() = aten::select(%2569, %2570, %2571), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2573 : Float(1, 64, 8, 8) = aten::mul(%2572, %2071), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2574 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2575 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2576 : Float() = aten::select(%2569, %2574, %2575), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2577 : Float(1, 64, 8, 8) = aten::mul(%2576, %input.122), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2578 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2579 : Float(1, 64, 8, 8) = aten::add(%2573, %2577, %2578), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2580 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2581 : int = prim::Constant[value=2](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2582 : Float() = aten::select(%2569, %2580, %2581), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2583 : int[] = prim::Constant[value=[2, 2]]()

%2584 : int[] = prim::Constant[value=[2, 2]]()

%2585 : int[] = prim::Constant[value=[0, 0]]()

%2586 : int[] = prim::Constant[value=[1, 1]]()

%2587 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p6_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2588 : Float(1, 64, 8, 8) = aten::max_pool2d(%input.173, %2583, %2584, %2585, %2586, %2587), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p6_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2589 : Float(1, 64, 8, 8) = aten::mul(%2582, %2588), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2590 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%input.150 : Float(1, 64, 8, 8) = aten::add(%2579, %2589, %2590), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:126:0

%2592 : int[] = prim::Constant[value=[1, 1]]()

%2593 : int[] = prim::Constant[value=[1, 1]]()

%2594 : int[] = prim::Constant[value=[1, 1]]()

%2595 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2596 : int[] = prim::Constant[value=[0, 0]]()

%2597 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2598 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2599 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2600 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.151 : Float(1, 64, 8, 8) = aten::_convolution(%input.150, %bifpn.1.conv6_down.conv.0.weight, %bifpn.1.conv6_down.conv.0.bias, %2592, %2593, %2594, %2595, %2596, %2597, %2598, %2599, %2600), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2602 : int[] = prim::Constant[value=[1, 1]]()

%2603 : int[] = prim::Constant[value=[0, 0]]()

%2604 : int[] = prim::Constant[value=[1, 1]]()

%2605 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2606 : int[] = prim::Constant[value=[0, 0]]()

%2607 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2608 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2609 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2610 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.152 : Float(1, 64, 8, 8) = aten::_convolution(%input.151, %bifpn.1.conv6_down.conv.1.weight, %bifpn.1.conv6_down.conv.1.bias, %2602, %2603, %2604, %2605, %2606, %2607, %2608, %2609, %2610), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2612 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2613 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2614 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2615 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.153 : Float(1, 64, 8, 8) = aten::batch_norm(%input.152, %bifpn.1.conv6_down.conv.2.weight, %bifpn.1.conv6_down.conv.2.bias, %bifpn.1.conv6_down.conv.2.running_mean, %bifpn.1.conv6_down.conv.2.running_var, %2612, %2613, %2614, %2615), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.180 : Float(1, 64, 8, 8) = aten::relu(%input.153), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv6_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2618 : Float(2) = aten::relu(%bifpn.1.p7_w2), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ReLU[p7_w2_relu] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2619 : int[] = prim::Constant[value=[0]]()

%2620 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2621 : None = prim::Constant(), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]

%2622 : Float() = aten::sum(%2618, %2619, %2620, %2621), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2623 : Double() = prim::Constant[value={0.0001}](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2624 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2625 : Float() = aten::add(%2622, %2623, %2624), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2626 : Float(2) = aten::div(%2618, %2625), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:129:0

%2627 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2628 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2629 : Float() = aten::select(%2626, %2627, %2628), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2630 : Float(1, 64, 4, 4) = aten::mul(%2629, %input.116), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2631 : int = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2632 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2633 : Float() = aten::select(%2626, %2631, %2632), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2634 : int[] = prim::Constant[value=[2, 2]]()

%2635 : int[] = prim::Constant[value=[2, 2]]()

%2636 : int[] = prim::Constant[value=[0, 0]]()

%2637 : int[] = prim::Constant[value=[1, 1]]()

%2638 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p7_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2639 : Float(1, 64, 4, 4) = aten::max_pool2d(%input.180, %2634, %2635, %2636, %2637, %2638), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/MaxPool2d[p7_downsample] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:488:0

%2640 : Float(1, 64, 4, 4) = aten::mul(%2633, %2639), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2641 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%input.155 : Float(1, 64, 4, 4) = aten::add(%2630, %2640, %2641), scope: EfficientDet/Sequential[bifpn]/BiFPN[1] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:131:0

%2643 : int[] = prim::Constant[value=[1, 1]]()

%2644 : int[] = prim::Constant[value=[1, 1]]()

%2645 : int[] = prim::Constant[value=[1, 1]]()

%2646 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2647 : int[] = prim::Constant[value=[0, 0]]()

%2648 : int = prim::Constant[value=64](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2649 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2650 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2651 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.156 : Float(1, 64, 4, 4) = aten::_convolution(%input.155, %bifpn.1.conv7_down.conv.0.weight, %bifpn.1.conv7_down.conv.0.bias, %2643, %2644, %2645, %2646, %2647, %2648, %2649, %2650, %2651), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2653 : int[] = prim::Constant[value=[1, 1]]()

%2654 : int[] = prim::Constant[value=[0, 0]]()

%2655 : int[] = prim::Constant[value=[1, 1]]()

%2656 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2657 : int[] = prim::Constant[value=[0, 0]]()

%2658 : int = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2659 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2660 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2661 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.157 : Float(1, 64, 4, 4) = aten::_convolution(%input.156, %bifpn.1.conv7_down.conv.1.weight, %bifpn.1.conv7_down.conv.1.bias, %2653, %2654, %2655, %2656, %2657, %2658, %2659, %2660, %2661), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/Conv2d[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2663 : bool = prim::Constant[value=0](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2664 : float = prim::Constant[value=0.9997](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2665 : float = prim::Constant[value=4e-05](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%2666 : bool = prim::Constant[value=1](), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.158 : Float(1, 64, 4, 4) = aten::batch_norm(%input.157, %bifpn.1.conv7_down.conv.2.weight, %bifpn.1.conv7_down.conv.2.bias, %bifpn.1.conv7_down.conv.2.running_mean, %bifpn.1.conv7_down.conv.2.running_var, %2663, %2664, %2665, %2666), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/BatchNorm2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:1670:0

%input.187 : Float(1, 64, 4, 4) = aten::relu(%input.158), scope: EfficientDet/Sequential[bifpn]/BiFPN[1]/ConvBlock[conv7_down]/Sequential[conv]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:914:0

%2669 : int[] = prim::Constant[value=[1, 1]]()

%2670 : int[] = prim::Constant[value=[1, 1]]()

%2671 : int[] = prim::Constant[value=[1, 1]]()

%2672 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2673 : int[] = prim::Constant[value=[0, 0]]()

%2674 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2675 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2676 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2677 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.160 : Float(1, 64, 64, 64) = aten::_convolution(%input.159, %regressor.layers.0.weight, %regressor.layers.0.bias, %2669, %2670, %2671, %2672, %2673, %2674, %2675, %2676, %2677), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.161 : Float(1, 64, 64, 64) = aten::relu_(%input.160), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2680 : int[] = prim::Constant[value=[1, 1]]()

%2681 : int[] = prim::Constant[value=[1, 1]]()

%2682 : int[] = prim::Constant[value=[1, 1]]()

%2683 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2684 : int[] = prim::Constant[value=[0, 0]]()

%2685 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2686 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2687 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2688 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.162 : Float(1, 64, 64, 64) = aten::_convolution(%input.161, %regressor.layers.2.weight, %regressor.layers.2.bias, %2680, %2681, %2682, %2683, %2684, %2685, %2686, %2687, %2688), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.163 : Float(1, 64, 64, 64) = aten::relu_(%input.162), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2691 : int[] = prim::Constant[value=[1, 1]]()

%2692 : int[] = prim::Constant[value=[1, 1]]()

%2693 : int[] = prim::Constant[value=[1, 1]]()

%2694 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2695 : int[] = prim::Constant[value=[0, 0]]()

%2696 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2697 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2698 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2699 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.164 : Float(1, 64, 64, 64) = aten::_convolution(%input.163, %regressor.layers.4.weight, %regressor.layers.4.bias, %2691, %2692, %2693, %2694, %2695, %2696, %2697, %2698, %2699), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.165 : Float(1, 64, 64, 64) = aten::relu_(%input.164), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2702 : int[] = prim::Constant[value=[1, 1]]()

%2703 : int[] = prim::Constant[value=[1, 1]]()

%2704 : int[] = prim::Constant[value=[1, 1]]()

%2705 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2706 : int[] = prim::Constant[value=[0, 0]]()

%2707 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2708 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2709 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2710 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2711 : Float(1, 36, 64, 64) = aten::_convolution(%input.165, %regressor.header.weight, %regressor.header.bias, %2702, %2703, %2704, %2705, %2706, %2707, %2708, %2709, %2710), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2712 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2713 : Float(1, 64, 64, 36) = aten::permute(%2711, %2712), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:149:0

%2714 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2715 : Float(1, 64, 64, 36) = aten::contiguous(%2713, %2714), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2716 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2717 : int = aten::size(%2713, %2716), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2718 : int = prim::Constant[value=-1](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2719 : int = prim::Constant[value=4](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2720 : int[] = prim::ListConstruct(%2717, %2718, %2719), scope: EfficientDet/Regressor[regressor]

%2721 : Float(1, 36864, 4) = aten::view(%2715, %2720), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2722 : int[] = prim::Constant[value=[1, 1]]()

%2723 : int[] = prim::Constant[value=[1, 1]]()

%2724 : int[] = prim::Constant[value=[1, 1]]()

%2725 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2726 : int[] = prim::Constant[value=[0, 0]]()

%2727 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2728 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2729 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2730 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.167 : Float(1, 64, 32, 32) = aten::_convolution(%input.166, %regressor.layers.0.weight, %regressor.layers.0.bias, %2722, %2723, %2724, %2725, %2726, %2727, %2728, %2729, %2730), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.168 : Float(1, 64, 32, 32) = aten::relu_(%input.167), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2733 : int[] = prim::Constant[value=[1, 1]]()

%2734 : int[] = prim::Constant[value=[1, 1]]()

%2735 : int[] = prim::Constant[value=[1, 1]]()

%2736 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2737 : int[] = prim::Constant[value=[0, 0]]()

%2738 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2739 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2740 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2741 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.169 : Float(1, 64, 32, 32) = aten::_convolution(%input.168, %regressor.layers.2.weight, %regressor.layers.2.bias, %2733, %2734, %2735, %2736, %2737, %2738, %2739, %2740, %2741), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.170 : Float(1, 64, 32, 32) = aten::relu_(%input.169), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2744 : int[] = prim::Constant[value=[1, 1]]()

%2745 : int[] = prim::Constant[value=[1, 1]]()

%2746 : int[] = prim::Constant[value=[1, 1]]()

%2747 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2748 : int[] = prim::Constant[value=[0, 0]]()

%2749 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2750 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2751 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2752 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.171 : Float(1, 64, 32, 32) = aten::_convolution(%input.170, %regressor.layers.4.weight, %regressor.layers.4.bias, %2744, %2745, %2746, %2747, %2748, %2749, %2750, %2751, %2752), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.172 : Float(1, 64, 32, 32) = aten::relu_(%input.171), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2755 : int[] = prim::Constant[value=[1, 1]]()

%2756 : int[] = prim::Constant[value=[1, 1]]()

%2757 : int[] = prim::Constant[value=[1, 1]]()

%2758 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2759 : int[] = prim::Constant[value=[0, 0]]()

%2760 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2761 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2762 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2763 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2764 : Float(1, 36, 32, 32) = aten::_convolution(%input.172, %regressor.header.weight, %regressor.header.bias, %2755, %2756, %2757, %2758, %2759, %2760, %2761, %2762, %2763), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2765 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2766 : Float(1, 32, 32, 36) = aten::permute(%2764, %2765), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:149:0

%2767 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2768 : Float(1, 32, 32, 36) = aten::contiguous(%2766, %2767), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2769 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2770 : int = aten::size(%2766, %2769), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2771 : int = prim::Constant[value=-1](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2772 : int = prim::Constant[value=4](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2773 : int[] = prim::ListConstruct(%2770, %2771, %2772), scope: EfficientDet/Regressor[regressor]

%2774 : Float(1, 9216, 4) = aten::view(%2768, %2773), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2775 : int[] = prim::Constant[value=[1, 1]]()

%2776 : int[] = prim::Constant[value=[1, 1]]()

%2777 : int[] = prim::Constant[value=[1, 1]]()

%2778 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2779 : int[] = prim::Constant[value=[0, 0]]()

%2780 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2781 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2782 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2783 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.174 : Float(1, 64, 16, 16) = aten::_convolution(%input.173, %regressor.layers.0.weight, %regressor.layers.0.bias, %2775, %2776, %2777, %2778, %2779, %2780, %2781, %2782, %2783), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.175 : Float(1, 64, 16, 16) = aten::relu_(%input.174), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2786 : int[] = prim::Constant[value=[1, 1]]()

%2787 : int[] = prim::Constant[value=[1, 1]]()

%2788 : int[] = prim::Constant[value=[1, 1]]()

%2789 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2790 : int[] = prim::Constant[value=[0, 0]]()

%2791 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2792 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2793 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2794 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.176 : Float(1, 64, 16, 16) = aten::_convolution(%input.175, %regressor.layers.2.weight, %regressor.layers.2.bias, %2786, %2787, %2788, %2789, %2790, %2791, %2792, %2793, %2794), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.177 : Float(1, 64, 16, 16) = aten::relu_(%input.176), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2797 : int[] = prim::Constant[value=[1, 1]]()

%2798 : int[] = prim::Constant[value=[1, 1]]()

%2799 : int[] = prim::Constant[value=[1, 1]]()

%2800 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2801 : int[] = prim::Constant[value=[0, 0]]()

%2802 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2803 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2804 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2805 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.178 : Float(1, 64, 16, 16) = aten::_convolution(%input.177, %regressor.layers.4.weight, %regressor.layers.4.bias, %2797, %2798, %2799, %2800, %2801, %2802, %2803, %2804, %2805), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.179 : Float(1, 64, 16, 16) = aten::relu_(%input.178), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2808 : int[] = prim::Constant[value=[1, 1]]()

%2809 : int[] = prim::Constant[value=[1, 1]]()

%2810 : int[] = prim::Constant[value=[1, 1]]()

%2811 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2812 : int[] = prim::Constant[value=[0, 0]]()

%2813 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2814 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2815 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2816 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2817 : Float(1, 36, 16, 16) = aten::_convolution(%input.179, %regressor.header.weight, %regressor.header.bias, %2808, %2809, %2810, %2811, %2812, %2813, %2814, %2815, %2816), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2818 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2819 : Float(1, 16, 16, 36) = aten::permute(%2817, %2818), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:149:0

%2820 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2821 : Float(1, 16, 16, 36) = aten::contiguous(%2819, %2820), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2822 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2823 : int = aten::size(%2819, %2822), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2824 : int = prim::Constant[value=-1](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2825 : int = prim::Constant[value=4](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2826 : int[] = prim::ListConstruct(%2823, %2824, %2825), scope: EfficientDet/Regressor[regressor]

%2827 : Float(1, 2304, 4) = aten::view(%2821, %2826), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2828 : int[] = prim::Constant[value=[1, 1]]()

%2829 : int[] = prim::Constant[value=[1, 1]]()

%2830 : int[] = prim::Constant[value=[1, 1]]()

%2831 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2832 : int[] = prim::Constant[value=[0, 0]]()

%2833 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2834 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2835 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2836 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.181 : Float(1, 64, 8, 8) = aten::_convolution(%input.180, %regressor.layers.0.weight, %regressor.layers.0.bias, %2828, %2829, %2830, %2831, %2832, %2833, %2834, %2835, %2836), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.182 : Float(1, 64, 8, 8) = aten::relu_(%input.181), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2839 : int[] = prim::Constant[value=[1, 1]]()

%2840 : int[] = prim::Constant[value=[1, 1]]()

%2841 : int[] = prim::Constant[value=[1, 1]]()

%2842 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2843 : int[] = prim::Constant[value=[0, 0]]()

%2844 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2845 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2846 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2847 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.183 : Float(1, 64, 8, 8) = aten::_convolution(%input.182, %regressor.layers.2.weight, %regressor.layers.2.bias, %2839, %2840, %2841, %2842, %2843, %2844, %2845, %2846, %2847), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.184 : Float(1, 64, 8, 8) = aten::relu_(%input.183), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2850 : int[] = prim::Constant[value=[1, 1]]()

%2851 : int[] = prim::Constant[value=[1, 1]]()

%2852 : int[] = prim::Constant[value=[1, 1]]()

%2853 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2854 : int[] = prim::Constant[value=[0, 0]]()

%2855 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2856 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2857 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2858 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.185 : Float(1, 64, 8, 8) = aten::_convolution(%input.184, %regressor.layers.4.weight, %regressor.layers.4.bias, %2850, %2851, %2852, %2853, %2854, %2855, %2856, %2857, %2858), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.186 : Float(1, 64, 8, 8) = aten::relu_(%input.185), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2861 : int[] = prim::Constant[value=[1, 1]]()

%2862 : int[] = prim::Constant[value=[1, 1]]()

%2863 : int[] = prim::Constant[value=[1, 1]]()

%2864 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2865 : int[] = prim::Constant[value=[0, 0]]()

%2866 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2867 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2868 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2869 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2870 : Float(1, 36, 8, 8) = aten::_convolution(%input.186, %regressor.header.weight, %regressor.header.bias, %2861, %2862, %2863, %2864, %2865, %2866, %2867, %2868, %2869), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2871 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2872 : Float(1, 8, 8, 36) = aten::permute(%2870, %2871), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:149:0

%2873 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2874 : Float(1, 8, 8, 36) = aten::contiguous(%2872, %2873), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2875 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2876 : int = aten::size(%2872, %2875), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2877 : int = prim::Constant[value=-1](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2878 : int = prim::Constant[value=4](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2879 : int[] = prim::ListConstruct(%2876, %2877, %2878), scope: EfficientDet/Regressor[regressor]

%2880 : Float(1, 576, 4) = aten::view(%2874, %2879), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2881 : int[] = prim::Constant[value=[1, 1]]()

%2882 : int[] = prim::Constant[value=[1, 1]]()

%2883 : int[] = prim::Constant[value=[1, 1]]()

%2884 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2885 : int[] = prim::Constant[value=[0, 0]]()

%2886 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2887 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2888 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2889 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.188 : Float(1, 64, 4, 4) = aten::_convolution(%input.187, %regressor.layers.0.weight, %regressor.layers.0.bias, %2881, %2882, %2883, %2884, %2885, %2886, %2887, %2888, %2889), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.189 : Float(1, 64, 4, 4) = aten::relu_(%input.188), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2892 : int[] = prim::Constant[value=[1, 1]]()

%2893 : int[] = prim::Constant[value=[1, 1]]()

%2894 : int[] = prim::Constant[value=[1, 1]]()

%2895 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2896 : int[] = prim::Constant[value=[0, 0]]()

%2897 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2898 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2899 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2900 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.190 : Float(1, 64, 4, 4) = aten::_convolution(%input.189, %regressor.layers.2.weight, %regressor.layers.2.bias, %2892, %2893, %2894, %2895, %2896, %2897, %2898, %2899, %2900), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.191 : Float(1, 64, 4, 4) = aten::relu_(%input.190), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2903 : int[] = prim::Constant[value=[1, 1]]()

%2904 : int[] = prim::Constant[value=[1, 1]]()

%2905 : int[] = prim::Constant[value=[1, 1]]()

%2906 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2907 : int[] = prim::Constant[value=[0, 0]]()

%2908 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2909 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2910 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2911 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.192 : Float(1, 64, 4, 4) = aten::_convolution(%input.191, %regressor.layers.4.weight, %regressor.layers.4.bias, %2903, %2904, %2905, %2906, %2907, %2908, %2909, %2910, %2911), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.193 : Float(1, 64, 4, 4) = aten::relu_(%input.192), scope: EfficientDet/Regressor[regressor]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2914 : int[] = prim::Constant[value=[1, 1]]()

%2915 : int[] = prim::Constant[value=[1, 1]]()

%2916 : int[] = prim::Constant[value=[1, 1]]()

%2917 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2918 : int[] = prim::Constant[value=[0, 0]]()

%2919 : int = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2920 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2921 : bool = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2922 : bool = prim::Constant[value=1](), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2923 : Float(1, 36, 4, 4) = aten::_convolution(%input.193, %regressor.header.weight, %regressor.header.bias, %2914, %2915, %2916, %2917, %2918, %2919, %2920, %2921, %2922), scope: EfficientDet/Regressor[regressor]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2924 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2925 : Float(1, 4, 4, 36) = aten::permute(%2923, %2924), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:149:0

%2926 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2927 : Float(1, 4, 4, 36) = aten::contiguous(%2925, %2926), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2928 : int = prim::Constant[value=0](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2929 : int = aten::size(%2925, %2928), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2930 : int = prim::Constant[value=-1](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2931 : int = prim::Constant[value=4](), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2932 : int[] = prim::ListConstruct(%2929, %2930, %2931), scope: EfficientDet/Regressor[regressor]

%2933 : Float(1, 144, 4) = aten::view(%2927, %2932), scope: EfficientDet/Regressor[regressor] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:150:0

%2934 : Tensor[] = prim::ListConstruct(%2721, %2774, %2827, %2880, %2933), scope: EfficientDet

%2935 : int = prim::Constant[value=1](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:269:0

%2936 : Float(1, 49104, 4) = aten::cat(%2934, %2935), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:269:0

%2937 : int[] = prim::Constant[value=[1, 1]]()

%2938 : int[] = prim::Constant[value=[1, 1]]()

%2939 : int[] = prim::Constant[value=[1, 1]]()

%2940 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2941 : int[] = prim::Constant[value=[0, 0]]()

%2942 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2943 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2944 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2945 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.194 : Float(1, 64, 64, 64) = aten::_convolution(%input.159, %classifier.layers.0.weight, %classifier.layers.0.bias, %2937, %2938, %2939, %2940, %2941, %2942, %2943, %2944, %2945), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.195 : Float(1, 64, 64, 64) = aten::relu_(%input.194), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2948 : int[] = prim::Constant[value=[1, 1]]()

%2949 : int[] = prim::Constant[value=[1, 1]]()

%2950 : int[] = prim::Constant[value=[1, 1]]()

%2951 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2952 : int[] = prim::Constant[value=[0, 0]]()

%2953 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2954 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2955 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2956 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.196 : Float(1, 64, 64, 64) = aten::_convolution(%input.195, %classifier.layers.2.weight, %classifier.layers.2.bias, %2948, %2949, %2950, %2951, %2952, %2953, %2954, %2955, %2956), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.197 : Float(1, 64, 64, 64) = aten::relu_(%input.196), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2959 : int[] = prim::Constant[value=[1, 1]]()

%2960 : int[] = prim::Constant[value=[1, 1]]()

%2961 : int[] = prim::Constant[value=[1, 1]]()

%2962 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2963 : int[] = prim::Constant[value=[0, 0]]()

%2964 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2965 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2966 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2967 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.198 : Float(1, 64, 64, 64) = aten::_convolution(%input.197, %classifier.layers.4.weight, %classifier.layers.4.bias, %2959, %2960, %2961, %2962, %2963, %2964, %2965, %2966, %2967), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.199 : Float(1, 64, 64, 64) = aten::relu_(%input.198), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%2970 : int[] = prim::Constant[value=[1, 1]]()

%2971 : int[] = prim::Constant[value=[1, 1]]()

%2972 : int[] = prim::Constant[value=[1, 1]]()

%2973 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2974 : int[] = prim::Constant[value=[0, 0]]()

%2975 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2976 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2977 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2978 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2979 : Float(1, 720, 64, 64) = aten::_convolution(%input.199, %classifier.header.weight, %classifier.header.bias, %2970, %2971, %2972, %2973, %2974, %2975, %2976, %2977, %2978), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%2980 : Float(1, 720, 64, 64) = aten::sigmoid(%2979), scope: EfficientDet/Classifier[classifier]/Sigmoid[act] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/activation.py:271:0

%2981 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%2982 : Float(1, 64, 64, 720) = aten::permute(%2980, %2981), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:170:0

%2983 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2984 : Float(1, 64, 64, 720) = aten::contiguous(%2982, %2983), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2985 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2986 : int = aten::size(%2982, %2985), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2987 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2988 : int = aten::size(%2982, %2987), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2989 : int = prim::Constant[value=2](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2990 : int = aten::size(%2982, %2989), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%2991 : int = prim::Constant[value=9](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%2992 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%2993 : int[] = prim::ListConstruct(%2986, %2988, %2990, %2991, %2992), scope: EfficientDet/Classifier[classifier]

%2994 : Float(1, 64, 64, 9, 80) = aten::view(%2984, %2993), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%2995 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%2996 : Float(1, 64, 64, 9, 80) = aten::contiguous(%2994, %2995), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%2997 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%2998 : int = aten::size(%2996, %2997), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%2999 : int = prim::Constant[value=-1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3000 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3001 : int[] = prim::ListConstruct(%2998, %2999, %3000), scope: EfficientDet/Classifier[classifier]

%3002 : Float(1, 36864, 80) = aten::view(%2996, %3001), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3003 : int[] = prim::Constant[value=[1, 1]]()

%3004 : int[] = prim::Constant[value=[1, 1]]()

%3005 : int[] = prim::Constant[value=[1, 1]]()

%3006 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3007 : int[] = prim::Constant[value=[0, 0]]()

%3008 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3009 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3010 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3011 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.200 : Float(1, 64, 32, 32) = aten::_convolution(%input.166, %classifier.layers.0.weight, %classifier.layers.0.bias, %3003, %3004, %3005, %3006, %3007, %3008, %3009, %3010, %3011), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.201 : Float(1, 64, 32, 32) = aten::relu_(%input.200), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3014 : int[] = prim::Constant[value=[1, 1]]()

%3015 : int[] = prim::Constant[value=[1, 1]]()

%3016 : int[] = prim::Constant[value=[1, 1]]()

%3017 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3018 : int[] = prim::Constant[value=[0, 0]]()

%3019 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3020 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3021 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3022 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.202 : Float(1, 64, 32, 32) = aten::_convolution(%input.201, %classifier.layers.2.weight, %classifier.layers.2.bias, %3014, %3015, %3016, %3017, %3018, %3019, %3020, %3021, %3022), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.203 : Float(1, 64, 32, 32) = aten::relu_(%input.202), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3025 : int[] = prim::Constant[value=[1, 1]]()

%3026 : int[] = prim::Constant[value=[1, 1]]()

%3027 : int[] = prim::Constant[value=[1, 1]]()

%3028 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3029 : int[] = prim::Constant[value=[0, 0]]()

%3030 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3031 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3032 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3033 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.204 : Float(1, 64, 32, 32) = aten::_convolution(%input.203, %classifier.layers.4.weight, %classifier.layers.4.bias, %3025, %3026, %3027, %3028, %3029, %3030, %3031, %3032, %3033), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.205 : Float(1, 64, 32, 32) = aten::relu_(%input.204), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3036 : int[] = prim::Constant[value=[1, 1]]()

%3037 : int[] = prim::Constant[value=[1, 1]]()

%3038 : int[] = prim::Constant[value=[1, 1]]()

%3039 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3040 : int[] = prim::Constant[value=[0, 0]]()

%3041 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3042 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3043 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3044 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3045 : Float(1, 720, 32, 32) = aten::_convolution(%input.205, %classifier.header.weight, %classifier.header.bias, %3036, %3037, %3038, %3039, %3040, %3041, %3042, %3043, %3044), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3046 : Float(1, 720, 32, 32) = aten::sigmoid(%3045), scope: EfficientDet/Classifier[classifier]/Sigmoid[act] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/activation.py:271:0

%3047 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%3048 : Float(1, 32, 32, 720) = aten::permute(%3046, %3047), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:170:0

%3049 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3050 : Float(1, 32, 32, 720) = aten::contiguous(%3048, %3049), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3051 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3052 : int = aten::size(%3048, %3051), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3053 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3054 : int = aten::size(%3048, %3053), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3055 : int = prim::Constant[value=2](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3056 : int = aten::size(%3048, %3055), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3057 : int = prim::Constant[value=9](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3058 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3059 : int[] = prim::ListConstruct(%3052, %3054, %3056, %3057, %3058), scope: EfficientDet/Classifier[classifier]

%3060 : Float(1, 32, 32, 9, 80) = aten::view(%3050, %3059), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3061 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3062 : Float(1, 32, 32, 9, 80) = aten::contiguous(%3060, %3061), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3063 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3064 : int = aten::size(%3062, %3063), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3065 : int = prim::Constant[value=-1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3066 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3067 : int[] = prim::ListConstruct(%3064, %3065, %3066), scope: EfficientDet/Classifier[classifier]

%3068 : Float(1, 9216, 80) = aten::view(%3062, %3067), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3069 : int[] = prim::Constant[value=[1, 1]]()

%3070 : int[] = prim::Constant[value=[1, 1]]()

%3071 : int[] = prim::Constant[value=[1, 1]]()

%3072 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3073 : int[] = prim::Constant[value=[0, 0]]()

%3074 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3075 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3076 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3077 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.206 : Float(1, 64, 16, 16) = aten::_convolution(%input.173, %classifier.layers.0.weight, %classifier.layers.0.bias, %3069, %3070, %3071, %3072, %3073, %3074, %3075, %3076, %3077), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.207 : Float(1, 64, 16, 16) = aten::relu_(%input.206), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3080 : int[] = prim::Constant[value=[1, 1]]()

%3081 : int[] = prim::Constant[value=[1, 1]]()

%3082 : int[] = prim::Constant[value=[1, 1]]()

%3083 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3084 : int[] = prim::Constant[value=[0, 0]]()

%3085 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3086 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3087 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3088 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.208 : Float(1, 64, 16, 16) = aten::_convolution(%input.207, %classifier.layers.2.weight, %classifier.layers.2.bias, %3080, %3081, %3082, %3083, %3084, %3085, %3086, %3087, %3088), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.209 : Float(1, 64, 16, 16) = aten::relu_(%input.208), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3091 : int[] = prim::Constant[value=[1, 1]]()

%3092 : int[] = prim::Constant[value=[1, 1]]()

%3093 : int[] = prim::Constant[value=[1, 1]]()

%3094 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3095 : int[] = prim::Constant[value=[0, 0]]()

%3096 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3097 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3098 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3099 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.210 : Float(1, 64, 16, 16) = aten::_convolution(%input.209, %classifier.layers.4.weight, %classifier.layers.4.bias, %3091, %3092, %3093, %3094, %3095, %3096, %3097, %3098, %3099), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.211 : Float(1, 64, 16, 16) = aten::relu_(%input.210), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3102 : int[] = prim::Constant[value=[1, 1]]()

%3103 : int[] = prim::Constant[value=[1, 1]]()

%3104 : int[] = prim::Constant[value=[1, 1]]()

%3105 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3106 : int[] = prim::Constant[value=[0, 0]]()

%3107 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3108 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3109 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3110 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3111 : Float(1, 720, 16, 16) = aten::_convolution(%input.211, %classifier.header.weight, %classifier.header.bias, %3102, %3103, %3104, %3105, %3106, %3107, %3108, %3109, %3110), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3112 : Float(1, 720, 16, 16) = aten::sigmoid(%3111), scope: EfficientDet/Classifier[classifier]/Sigmoid[act] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/activation.py:271:0

%3113 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%3114 : Float(1, 16, 16, 720) = aten::permute(%3112, %3113), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:170:0

%3115 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3116 : Float(1, 16, 16, 720) = aten::contiguous(%3114, %3115), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3117 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3118 : int = aten::size(%3114, %3117), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3119 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3120 : int = aten::size(%3114, %3119), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3121 : int = prim::Constant[value=2](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3122 : int = aten::size(%3114, %3121), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3123 : int = prim::Constant[value=9](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3124 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3125 : int[] = prim::ListConstruct(%3118, %3120, %3122, %3123, %3124), scope: EfficientDet/Classifier[classifier]

%3126 : Float(1, 16, 16, 9, 80) = aten::view(%3116, %3125), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3127 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3128 : Float(1, 16, 16, 9, 80) = aten::contiguous(%3126, %3127), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3129 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3130 : int = aten::size(%3128, %3129), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3131 : int = prim::Constant[value=-1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3132 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3133 : int[] = prim::ListConstruct(%3130, %3131, %3132), scope: EfficientDet/Classifier[classifier]

%3134 : Float(1, 2304, 80) = aten::view(%3128, %3133), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3135 : int[] = prim::Constant[value=[1, 1]]()

%3136 : int[] = prim::Constant[value=[1, 1]]()

%3137 : int[] = prim::Constant[value=[1, 1]]()

%3138 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3139 : int[] = prim::Constant[value=[0, 0]]()

%3140 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3141 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3142 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3143 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.212 : Float(1, 64, 8, 8) = aten::_convolution(%input.180, %classifier.layers.0.weight, %classifier.layers.0.bias, %3135, %3136, %3137, %3138, %3139, %3140, %3141, %3142, %3143), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.213 : Float(1, 64, 8, 8) = aten::relu_(%input.212), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3146 : int[] = prim::Constant[value=[1, 1]]()

%3147 : int[] = prim::Constant[value=[1, 1]]()

%3148 : int[] = prim::Constant[value=[1, 1]]()

%3149 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3150 : int[] = prim::Constant[value=[0, 0]]()

%3151 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3152 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3153 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3154 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.214 : Float(1, 64, 8, 8) = aten::_convolution(%input.213, %classifier.layers.2.weight, %classifier.layers.2.bias, %3146, %3147, %3148, %3149, %3150, %3151, %3152, %3153, %3154), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.215 : Float(1, 64, 8, 8) = aten::relu_(%input.214), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3157 : int[] = prim::Constant[value=[1, 1]]()

%3158 : int[] = prim::Constant[value=[1, 1]]()

%3159 : int[] = prim::Constant[value=[1, 1]]()

%3160 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3161 : int[] = prim::Constant[value=[0, 0]]()

%3162 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3163 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3164 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3165 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.216 : Float(1, 64, 8, 8) = aten::_convolution(%input.215, %classifier.layers.4.weight, %classifier.layers.4.bias, %3157, %3158, %3159, %3160, %3161, %3162, %3163, %3164, %3165), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.217 : Float(1, 64, 8, 8) = aten::relu_(%input.216), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3168 : int[] = prim::Constant[value=[1, 1]]()

%3169 : int[] = prim::Constant[value=[1, 1]]()

%3170 : int[] = prim::Constant[value=[1, 1]]()

%3171 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3172 : int[] = prim::Constant[value=[0, 0]]()

%3173 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3174 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3175 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3176 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3177 : Float(1, 720, 8, 8) = aten::_convolution(%input.217, %classifier.header.weight, %classifier.header.bias, %3168, %3169, %3170, %3171, %3172, %3173, %3174, %3175, %3176), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3178 : Float(1, 720, 8, 8) = aten::sigmoid(%3177), scope: EfficientDet/Classifier[classifier]/Sigmoid[act] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/activation.py:271:0

%3179 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%3180 : Float(1, 8, 8, 720) = aten::permute(%3178, %3179), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:170:0

%3181 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3182 : Float(1, 8, 8, 720) = aten::contiguous(%3180, %3181), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3183 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3184 : int = aten::size(%3180, %3183), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3185 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3186 : int = aten::size(%3180, %3185), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3187 : int = prim::Constant[value=2](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3188 : int = aten::size(%3180, %3187), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3189 : int = prim::Constant[value=9](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3190 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3191 : int[] = prim::ListConstruct(%3184, %3186, %3188, %3189, %3190), scope: EfficientDet/Classifier[classifier]

%3192 : Float(1, 8, 8, 9, 80) = aten::view(%3182, %3191), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3193 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3194 : Float(1, 8, 8, 9, 80) = aten::contiguous(%3192, %3193), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3195 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3196 : int = aten::size(%3194, %3195), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3197 : int = prim::Constant[value=-1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3198 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3199 : int[] = prim::ListConstruct(%3196, %3197, %3198), scope: EfficientDet/Classifier[classifier]

%3200 : Float(1, 576, 80) = aten::view(%3194, %3199), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3201 : int[] = prim::Constant[value=[1, 1]]()

%3202 : int[] = prim::Constant[value=[1, 1]]()

%3203 : int[] = prim::Constant[value=[1, 1]]()

%3204 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3205 : int[] = prim::Constant[value=[0, 0]]()

%3206 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3207 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3208 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3209 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.218 : Float(1, 64, 4, 4) = aten::_convolution(%input.187, %classifier.layers.0.weight, %classifier.layers.0.bias, %3201, %3202, %3203, %3204, %3205, %3206, %3207, %3208, %3209), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[0] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.219 : Float(1, 64, 4, 4) = aten::relu_(%input.218), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[1] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3212 : int[] = prim::Constant[value=[1, 1]]()

%3213 : int[] = prim::Constant[value=[1, 1]]()

%3214 : int[] = prim::Constant[value=[1, 1]]()

%3215 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3216 : int[] = prim::Constant[value=[0, 0]]()

%3217 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3218 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3219 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3220 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.220 : Float(1, 64, 4, 4) = aten::_convolution(%input.219, %classifier.layers.2.weight, %classifier.layers.2.bias, %3212, %3213, %3214, %3215, %3216, %3217, %3218, %3219, %3220), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[2] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.221 : Float(1, 64, 4, 4) = aten::relu_(%input.220), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[3] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3223 : int[] = prim::Constant[value=[1, 1]]()

%3224 : int[] = prim::Constant[value=[1, 1]]()

%3225 : int[] = prim::Constant[value=[1, 1]]()

%3226 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3227 : int[] = prim::Constant[value=[0, 0]]()

%3228 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3229 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3230 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3231 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input.222 : Float(1, 64, 4, 4) = aten::_convolution(%input.221, %classifier.layers.4.weight, %classifier.layers.4.bias, %3223, %3224, %3225, %3226, %3227, %3228, %3229, %3230, %3231), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/Conv2d[4] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%input : Float(1, 64, 4, 4) = aten::relu_(%input.222), scope: EfficientDet/Classifier[classifier]/Sequential[layers]/ReLU[5] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/functional.py:912:0

%3234 : int[] = prim::Constant[value=[1, 1]]()

%3235 : int[] = prim::Constant[value=[1, 1]]()

%3236 : int[] = prim::Constant[value=[1, 1]]()

%3237 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3238 : int[] = prim::Constant[value=[0, 0]]()

%3239 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3240 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3241 : bool = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3242 : bool = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3243 : Float(1, 720, 4, 4) = aten::_convolution(%input, %classifier.header.weight, %classifier.header.bias, %3234, %3235, %3236, %3237, %3238, %3239, %3240, %3241, %3242), scope: EfficientDet/Classifier[classifier]/Conv2d[header] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/conv.py:342:0

%3244 : Float(1, 720, 4, 4) = aten::sigmoid(%3243), scope: EfficientDet/Classifier[classifier]/Sigmoid[act] # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/nn/modules/activation.py:271:0

%3245 : int[] = prim::Constant[value=[0, 2, 3, 1]]()

%3246 : Float(1, 4, 4, 720) = aten::permute(%3244, %3245), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:170:0

%3247 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3248 : Float(1, 4, 4, 720) = aten::contiguous(%3246, %3247), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3249 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3250 : int = aten::size(%3246, %3249), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3251 : int = prim::Constant[value=1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3252 : int = aten::size(%3246, %3251), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3253 : int = prim::Constant[value=2](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3254 : int = aten::size(%3246, %3253), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:171:0

%3255 : int = prim::Constant[value=9](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3256 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3257 : int[] = prim::ListConstruct(%3250, %3252, %3254, %3255, %3256), scope: EfficientDet/Classifier[classifier]

%3258 : Float(1, 4, 4, 9, 80) = aten::view(%3248, %3257), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:172:0

%3259 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3260 : Float(1, 4, 4, 9, 80) = aten::contiguous(%3258, %3259), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3261 : int = prim::Constant[value=0](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3262 : int = aten::size(%3260, %3261), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3263 : int = prim::Constant[value=-1](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3264 : int = prim::Constant[value=80](), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3265 : int[] = prim::ListConstruct(%3262, %3263, %3264), scope: EfficientDet/Classifier[classifier]

%3266 : Float(1, 144, 80) = aten::view(%3260, %3265), scope: EfficientDet/Classifier[classifier] # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:173:0

%3267 : Tensor[] = prim::ListConstruct(%3002, %3068, %3134, %3200, %3266), scope: EfficientDet

%3268 : int = prim::Constant[value=1](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:270:0

%3269 : Float(1, 49104, 80) = aten::cat(%3267, %3268), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:270:0

%3270 : int[] = prim::Constant[value=[3, 4, 5, 6, 7]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:85:0

%3271 : Function = prim::Constant[name="_get_image_shape"](), scope: EfficientDet/Anchors[anchors]

%3272 : Tensor[] = prim::CallFunction(%3271, %3270, %input_0), scope: EfficientDet/Anchors[anchors]

%3273 : Tensor, %3274 : Tensor, %3275 : Tensor, %3276 : Tensor, %3277 : Tensor = prim::ListUnpack(%3272), scope: EfficientDet/Anchors[anchors]

%3278 : int[] = prim::Constant[value=[0, 4]]()

%3279 : int = prim::Constant[value=6](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:87:0

%3280 : int = prim::Constant[value=0](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:87:0

%3281 : Device = prim::Constant[value="cpu"](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:87:0

%3282 : bool = prim::Constant[value=0](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:87:0

%3283 : Float(0, 4) = aten::zeros(%3278, %3279, %3280, %3281, %3282), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:87:0

%3284 : int[] = prim::Constant[value=[3, 4, 5, 6, 7]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:95:0

%3285 : int[] = prim::Constant[value=[32, 64, 128, 256, 512]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:95:0

%3286 : Float(3) = prim::Constant[value= 0.5000  1.0000  2.0000 [ CPUFloatType{3} ]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:95:0

%3287 : Float(3) = prim::Constant[value= 1.0000  1.2599  1.5874 [ CPUFloatType{3} ]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:95:0

%3288 : Tensor[] = prim::ListConstruct(%3273, %3274, %3275, %3276, %3277), scope: EfficientDet/Anchors[anchors]

%3289 : int[] = prim::Constant[value=[8, 16, 32, 64, 128]](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:95:0

%3290 : Function = prim::Constant[name="_generate_shifted_anchors"](), scope: EfficientDet/Anchors[anchors]

%3291 : Tensor = prim::CallFunction(%3290, %3283, %3284, %3285, %3286, %3287, %3288, %3289), scope: EfficientDet/Anchors[anchors]

%3292 : int = prim::Constant[value=0](), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:97:0

%3293 : Float(1, 49104, 4) = aten::unsqueeze(%3291, %3292), scope: EfficientDet/Anchors[anchors] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:97:0

%3294 : Float(4) = prim::Constant[value= 0.1000  0.1000  0.2000  0.2000 [ CUDAFloatType{4} ]](), scope: EfficientDet/BBoxTransform[regressBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:23:0

%3295 : Float(4) = prim::Constant[value= 0  0  0  0 [ CUDAFloatType{4} ]](), scope: EfficientDet/BBoxTransform[regressBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:23:0

%3296 : Function = prim::Constant[name="_bbox_forward"](), scope: EfficientDet/BBoxTransform[regressBoxes]

%3297 : Tensor = prim::CallFunction(%3296, %3294, %3295, %3293, %2936), scope: EfficientDet/BBoxTransform[regressBoxes]

%3298 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3299 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3300 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3301 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3302 : Float(1, 49104, 4) = aten::slice(%3297, %3298, %3299, %3300, %3301), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3303 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3304 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3305 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3306 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3307 : Float(1, 49104, 4) = aten::slice(%3302, %3303, %3304, %3305, %3306), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3308 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3309 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3310 : Float(1, 49104) = aten::select(%3307, %3308, %3309), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3311 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3312 : None = prim::Constant(), scope: EfficientDet/ClipBoxes[clipBoxes]

%3313 : Float(1, 49104) = aten::clamp(%3310, %3311, %3312), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3314 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3315 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3316 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3317 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3318 : Float(1, 49104, 4) = aten::slice(%3297, %3314, %3315, %3316, %3317), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3319 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3320 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3321 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3322 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3323 : Float(1, 49104, 4) = aten::slice(%3318, %3319, %3320, %3321, %3322), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3324 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3325 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3326 : Float(1, 49104) = aten::select(%3323, %3324, %3325), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3327 : int[] = prim::Constant[value=[49104]]()

%3328 : Float(49104) = aten::view(%3313, %3327), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3329 : int[] = prim::Constant[value=[1, 49104]]()

%3330 : bool = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3331 : Float(1, 49104) = aten::expand(%3328, %3329, %3330), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:60:0

%3332 : bool = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes]

%3333 : Float(1, 49104) = aten::copy_(%3326, %3331, %3332), scope: EfficientDet/ClipBoxes[clipBoxes]

%3334 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3335 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3336 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3337 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3338 : Float(1, 49104, 4) = aten::slice(%3297, %3334, %3335, %3336, %3337), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3339 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3340 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3341 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3342 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3343 : Float(1, 49104, 4) = aten::slice(%3338, %3339, %3340, %3341, %3342), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3344 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3345 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3346 : Float(1, 49104) = aten::select(%3343, %3344, %3345), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3347 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3348 : None = prim::Constant(), scope: EfficientDet/ClipBoxes[clipBoxes]

%3349 : Float(1, 49104) = aten::clamp(%3346, %3347, %3348), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3350 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3351 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3352 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3353 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3354 : Float(1, 49104, 4) = aten::slice(%3297, %3350, %3351, %3352, %3353), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3355 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3356 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3357 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3358 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3359 : Float(1, 49104, 4) = aten::slice(%3354, %3355, %3356, %3357, %3358), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3360 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3361 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3362 : Float(1, 49104) = aten::select(%3359, %3360, %3361), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3363 : int[] = prim::Constant[value=[49104]]()

%3364 : Float(49104) = aten::view(%3349, %3363), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3365 : int[] = prim::Constant[value=[1, 49104]]()

%3366 : bool = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3367 : Float(1, 49104) = aten::expand(%3364, %3365, %3366), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:61:0

%3368 : bool = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes]

%3369 : Float(1, 49104) = aten::copy_(%3362, %3367, %3368), scope: EfficientDet/ClipBoxes[clipBoxes]

%3370 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3371 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3372 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3373 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3374 : Float(1, 49104, 4) = aten::slice(%3297, %3370, %3371, %3372, %3373), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3375 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3376 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3377 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3378 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3379 : Float(1, 49104, 4) = aten::slice(%3374, %3375, %3376, %3377, %3378), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3380 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3381 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3382 : Float(1, 49104) = aten::select(%3379, %3380, %3381), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3383 : None = prim::Constant(), scope: EfficientDet/ClipBoxes[clipBoxes]

%3384 : int = prim::Constant[value=512](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3385 : Float(1, 49104) = aten::clamp(%3382, %3383, %3384), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3386 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3387 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3388 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3389 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3390 : Float(1, 49104, 4) = aten::slice(%3297, %3386, %3387, %3388, %3389), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3391 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3392 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3393 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3394 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3395 : Float(1, 49104, 4) = aten::slice(%3390, %3391, %3392, %3393, %3394), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3396 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3397 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3398 : Float(1, 49104) = aten::select(%3395, %3396, %3397), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3399 : int[] = prim::Constant[value=[49104]]()

%3400 : Float(49104) = aten::view(%3385, %3399), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3401 : int[] = prim::Constant[value=[1, 49104]]()

%3402 : bool = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3403 : Float(1, 49104) = aten::expand(%3400, %3401, %3402), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:63:0

%3404 : bool = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes]

%3405 : Float(1, 49104) = aten::copy_(%3398, %3403, %3404), scope: EfficientDet/ClipBoxes[clipBoxes]

%3406 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3407 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3408 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3409 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3410 : Float(1, 49104, 4) = aten::slice(%3297, %3406, %3407, %3408, %3409), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3411 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3412 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3413 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3414 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3415 : Float(1, 49104, 4) = aten::slice(%3410, %3411, %3412, %3413, %3414), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3416 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3417 : int = prim::Constant[value=3](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3418 : Float(1, 49104) = aten::select(%3415, %3416, %3417), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3419 : None = prim::Constant(), scope: EfficientDet/ClipBoxes[clipBoxes]

%3420 : int = prim::Constant[value=512](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3421 : Float(1, 49104) = aten::clamp(%3418, %3419, %3420), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3422 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3423 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3424 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3425 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3426 : Float(1, 49104, 4) = aten::slice(%3297, %3422, %3423, %3424, %3425), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3427 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3428 : int = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3429 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3430 : int = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3431 : Float(1, 49104, 4) = aten::slice(%3426, %3427, %3428, %3429, %3430), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3432 : int = prim::Constant[value=2](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3433 : int = prim::Constant[value=3](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3434 : Float(1, 49104) = aten::select(%3431, %3432, %3433), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3435 : int[] = prim::Constant[value=[49104]]()

%3436 : Float(49104) = aten::view(%3421, %3435), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3437 : int[] = prim::Constant[value=[1, 49104]]()

%3438 : bool = prim::Constant[value=1](), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3439 : Float(1, 49104) = aten::expand(%3436, %3437, %3438), scope: EfficientDet/ClipBoxes[clipBoxes] # /home/ljosefs/Desktop/EffDet/efficientdet/src/utils.py:64:0

%3440 : bool = prim::Constant[value=0](), scope: EfficientDet/ClipBoxes[clipBoxes]

%3441 : Float(1, 49104) = aten::copy_(%3434, %3439, %3440), scope: EfficientDet/ClipBoxes[clipBoxes]

%3442 : int = prim::Constant[value=2](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:279:0

%3443 : bool = prim::Constant[value=1](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:279:0

%scores : Float(1, 49104, 1), %3445 : Long(1, 49104, 1) = aten::max(%3269, %3442, %3443), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:279:0

%3446 : float = prim::Constant[value=0.05](), scope: EfficientDet # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/tensor.py:28:0

%3447 : Bool(1, 49104, 1) = aten::gt(%scores, %3446), scope: EfficientDet # /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/torch/tensor.py:28:0

%3448 : int = prim::Constant[value=0](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3449 : int = prim::Constant[value=0](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3450 : Bool(49104, 1) = aten::select(%3447, %3448, %3449), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3451 : int = prim::Constant[value=0](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3452 : int = prim::Constant[value=0](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3453 : int = prim::Constant[value=9223372036854775807](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3454 : int = prim::Constant[value=1](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3455 : Bool(49104, 1) = aten::slice(%3450, %3451, %3452, %3453, %3454), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3456 : int = prim::Constant[value=1](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3457 : int = prim::Constant[value=0](), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3458 : Bool(49104) = aten::select(%3455, %3456, %3457), scope: EfficientDet # /home/ljosefs/Desktop/EffDet/efficientdet/src/model.py:281:0

%3459 : Function = prim::Constant[name="foo"](), scope: EfficientDet

%3460 : (Tensor, Tensor, Tensor) = prim::CallFunction(%3459, %3458, %3269, %3297, %scores), scope: EfficientDet

%3461 : Tensor, %3462 : Tensor, %3463 : Tensor = prim::TupleUnpack(%3460), scope: EfficientDet

%3464 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%3461, %3462, %3463)

(Pdb) %3464 : (Tensor, Tensor, Tensor) = prim::TupleConstruct(%3461, %3462, %3463)

(Pdb)   /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/pdb.py(1667)main()
-> pdb._runscript(mainpyfile)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/pdb.py(1548)_runscript()
-> self.run(statement)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/bdb.py(434)run()
-> exec(cmd, globals, locals)
  <string>(1)<module>()
  /home/ljosefs/Desktop/EffDet/efficientdet/vai-quant.py(7)<module>()
-> import random """
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/apis.py(77)__init__()
-> custom_quant_ops = custom_quant_ops)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/base.py(122)__init__()
-> device=device)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/utils.py(175)prepare_quantizable_module()
-> graph = parse_module(module, input_args)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/qproc/utils.py(78)parse_module()
-> module, input_args)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/parser.py(68)__call__()
-> raw_graph, raw_params = graph_handler.build_torch_graph(graph_name, module, input_args)
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/trace_helper.py(44)build_torch_graph()
-> raw_graph, raw_params = self._build_raw_graph(graph_name, fw_graph, params)
> /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/trace_helper.py(159)_build_raw_graph()
-> const_value = TorchValue(list(fw_node.outputs())[0])
  /home/ljosefs/miniconda3/envs/vai-q-pytorch/lib/python3.6/site-packages/pytorch_nndct/parse/torch_graph.py(184)__init__()
-> self._type = str(value.type())
(Pdb) %3271 : Function = prim::Constant[name="_get_image_shape"](), scope: EfficientDet/Anchors[anchors]

(Pdb) ['__class__',
 '__delattr__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__le__',
 '__lt__',
 '__module__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'addBlock',
 'addInput',
 'addOutput',
 'attributeNames',
 'blocks',
 'cconv',
 'copyAttributes',
 'destroy',
 'eraseOutput',
 'f',
 'f_',
 'findAllNodes',
 'findNode',
 'fs',
 'fs_',
 'g',
 'g_',
 'gs',
 'gs_',
 'hasAttribute',
 'hasAttributes',
 'hasMultipleOutputs',
 'hasUses',
 'i',
 'i_',
 'input',
 'inputs',
 'inputsAt',
 'insertAfter',
 'insertBefore',
 'is',
 'isNondeterministic',
 'is_',
 'kind',
 'kindOf',
 'moveAfter',
 'moveBefore',
 'mustBeNone',
 'output',
 'outputs',
 'outputsAt',
 'outputsSize',
 'pyname',
 'pyobj',
 'removeAllInputs',
 'removeAttribute',
 'removeInput',
 'replaceAllUsesWith',
 'replaceInput',
 'replaceInputWith',
 's',
 's_',
 'scalar_args',
 'scopeName',
 'sourceRange',
 'ss',
 'ss_',
 't',
 't_',
 'ts',
 'ts_',
 'z',
 'z_',
 'zs',
 'zs_']
(Pdb) 